{"ast":null,"code":"var _jsxFileName = \"/Users/serenaantonetti/portfolio-2019/src/components/Sketch.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { TimelineMax, Power2 } from \"gsap/all\";\nimport * as dat from \"dat.gui\";\n\nclass Sketch extends Component {\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.vertex = `varying vec2 vUv;void main() {vUv = uv;gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );}`;\n    this.fragment = `\n\t\tuniform float time;\n\t\tuniform float progress;\n\t\tuniform float intensity;\n\t\tuniform float width;\n\t\tuniform float scaleX;\n\t\tuniform float scaleY;\n\t\tuniform float transition;\n\t\tuniform float radius;\n\t\tuniform float swipe;\n\t\tuniform sampler2D texture1;\n\t\tuniform sampler2D texture2;\n\t\tuniform sampler2D displacement;\n\t\tuniform vec4 resolution;\n\t\tvarying vec2 vUv;\n\t\tmat2 rotate(float a) {\n\t\t\tfloat s = sin(a);\n\t\t\tfloat c = cos(a);\n\t\t\treturn mat2(c, -s, s, c);\n\t\t}\n\t\tconst float PI = 3.1415;\n\t\tconst float angle1 = PI *0.25;\n\t\tconst float angle2 = -PI *0.75;\n\n\n\t\tvoid main()\t{\n\t\t\tvec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\n\t\t\tvec2 uvDivided = fract(newUV*vec2(intensity,1.));\n\n\n\t\t\tvec2 uvDisplaced1 = newUV + rotate(3.1415926/4.)*uvDivided*progress*0.1;\n\t\t\tvec2 uvDisplaced2 = newUV + rotate(3.1415926/4.)*uvDivided*(1. - progress)*0.1;\n\n\t\t\tvec4 t1 = texture2D(texture1,uvDisplaced1);\n\t\t\tvec4 t2 = texture2D(texture2,uvDisplaced2);\n\n\t\t\tgl_FragColor = mix(t1, t2, progress);\n\n\t\t}\n\n\t`;\n    this.uniforms = {\n      time: {\n        type: \"f\",\n        value: 0\n      },\n      progress: {\n        type: \"f\",\n        value: 0\n      },\n      border: {\n        type: \"f\",\n        value: 0\n      },\n      // intensity: { type: \"f\", value: 0 },\n      intensity: {\n        value: 50,\n        type: \"f\",\n        min: 1,\n        max: 100\n      },\n      scaleX: {\n        type: \"f\",\n        value: 40\n      },\n      scaleY: {\n        type: \"f\",\n        value: 40\n      },\n      transition: {\n        type: \"f\",\n        value: 40\n      },\n      swipe: {\n        type: \"f\",\n        value: 0\n      },\n      width: {\n        type: \"f\",\n        value: 0\n      },\n      radius: {\n        type: \"f\",\n        value: 0\n      },\n      texture1: {\n        type: \"f\",\n        value: this.textures[0]\n      },\n      texture2: {\n        type: \"f\",\n        value: this.textures[1]\n      },\n      displacement: {\n        type: \"f\",\n        value: new THREE.TextureLoader().load(\"img/disp1.jpg\")\n      },\n      resolution: {\n        type: \"v4\",\n        value: new THREE.Vector4()\n      }\n    };\n    this.renderer = new THREE.WebGLRenderer();\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setClearColor(0xeeeeee, 1);\n    this.duration = 1;\n    this.debug = true;\n    this.easing = \"easeInOut\";\n    this.clicker = document.getElementById(\"content\");\n    this.container = document.getElementById(\"slider\");\n    this.images = JSON.parse(this.container.getAttribute(\"data-images\"));\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.container.appendChild(this.renderer.domElement);\n    this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.001, 1000);\n    this.camera.position.set(0, 0, 2);\n    this.time = 0;\n    this.current = 0;\n    this.textures = [];\n    this.paused = true;\n    this.initiate(() => {\n      console.log(this.textures);\n      this.setupResize();\n      this.settings();\n      this.addObjects();\n      this.resize();\n      this.clickEvent();\n      this.play();\n    });\n  }\n\n  initiate(cb) {\n    const promises = [];\n    let that = this;\n    this.images.forEach((url, i) => {\n      let promise = new Promise(resolve => {\n        that.textures[i] = new THREE.TextureLoader().load(url, resolve);\n      });\n      promises.push(promise);\n    });\n    Promise.all(promises).then(() => {\n      cb();\n    });\n  }\n\n  clickEvent() {\n    this.clicker.addEventListener(\"click\", () => {\n      this.next();\n    });\n  }\n\n  settings() {\n    let that = this;\n    if (this.debug) this.gui = new dat.GUI();\n    this.settings = {\n      progress: 0.5\n    }; // if(this.debug) this.gui.add(this.settings, \"progress\", 0, 1, 0.01);\n\n    Object.keys(this.uniforms).forEach(item => {\n      this.settings[item] = this.uniforms[item].value;\n      if (this.debug) this.gui.add(this.settings, item, this.uniforms[item].min, this.uniforms[item].max, 0.01);\n    });\n  }\n\n  setupResize() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  resize() {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height; // image cover\n\n    this.imageAspect = this.textures[0].image.height / this.textures[0].image.width;\n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = this.width / this.height * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2 * (180 / Math.PI) * Math.atan(height / (2 * dist));\n    this.plane.scale.x = this.camera.aspect;\n    this.plane.scale.y = 1;\n    this.camera.updateProjectionMatrix();\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: {\n          type: \"f\",\n          value: 0\n        },\n        progress: {\n          type: \"f\",\n          value: 0\n        },\n        border: {\n          type: \"f\",\n          value: 0\n        },\n        intensity: {\n          type: \"f\",\n          value: 0\n        },\n        scaleX: {\n          type: \"f\",\n          value: 40\n        },\n        scaleY: {\n          type: \"f\",\n          value: 40\n        },\n        transition: {\n          type: \"f\",\n          value: 40\n        },\n        swipe: {\n          type: \"f\",\n          value: 0\n        },\n        width: {\n          type: \"f\",\n          value: 0\n        },\n        radius: {\n          type: \"f\",\n          value: 0\n        },\n        texture1: {\n          type: \"f\",\n          value: this.textures[0]\n        },\n        texture2: {\n          type: \"f\",\n          value: this.textures[1]\n        },\n        displacement: {\n          type: \"f\",\n          value: new THREE.TextureLoader().load(\"img/disp1.jpg\")\n        },\n        resolution: {\n          type: \"v4\",\n          value: new THREE.Vector4()\n        }\n      },\n      // wireframe: true,\n      vertexShader: this.vertex,\n      fragmentShader: this.fragment\n    });\n    this.geometry = new THREE.PlaneGeometry(1, 1, 2, 2);\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.plane);\n  }\n\n  stop() {\n    this.paused = true;\n  }\n\n  play() {\n    this.paused = false;\n    this.render();\n  }\n\n  next() {\n    if (this.isRunning) return;\n    this.isRunning = true;\n    let len = this.textures.length;\n    let nextTexture = this.textures[(this.current + 1) % len];\n    this.material.uniforms.texture2.value = nextTexture;\n    let tl = new TimelineMax();\n    tl.to(this.material.uniforms.progress, this.duration, {\n      value: 1,\n      ease: Power2[this.easing],\n      onComplete: () => {\n        console.log(\"FINISH\");\n        this.current = (this.current + 1) % len;\n        this.material.uniforms.texture1.value = nextTexture;\n        this.material.uniforms.progress.value = 0;\n        this.isRunning = false;\n      }\n    });\n  }\n\n  render() {\n    if (this.paused) return;\n    this.time += 0.05;\n    this.uniforms.time.value = this.time; // this.material.uniforms.progress.value = this.settings.progress;\n\n    Object.keys(this.uniforms).forEach(item => {\n      this.material.uniforms[item].value = this.settings[item];\n    }); // this.camera.position.z = 3;\n    // this.plane.rotation.y = 0.4*Math.sin(this.time)\n    // this.plane.rotation.x = 0.5*Math.sin(0.4*this.time)\n\n    requestAnimationFrame(this.render.bind(this));\n    this.renderer.render(this.scene, this.camera);\n    return React.createElement(\"div\", {\n      id: \"content\",\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"slider\",\n      \"data-images\": \"[ \\\"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/11/Webglimagetransitions_featured.jpg\\\", \\\"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/10/g.png\\\", \\\"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/10/uv.jpg\\\", \\\"LaPrinciere4.jpg\\\", \\\"LaPrinciere-Web1.jpg\\\", \\\"LaPrinciere-Web5.jpg\\\", \\\"LaPrinciere-Web4.jpg\\\", \\\"LaPrinciere-Web3.jpg\\\" ]\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Sketch;","map":{"version":3,"sources":["/Users/serenaantonetti/portfolio-2019/src/components/Sketch.js"],"names":["React","Component","THREE","TimelineMax","Power2","dat","Sketch","componentDidMount","scene","Scene","vertex","fragment","uniforms","time","type","value","progress","border","intensity","min","max","scaleX","scaleY","transition","swipe","width","radius","texture1","textures","texture2","displacement","TextureLoader","load","resolution","Vector4","renderer","WebGLRenderer","window","innerWidth","height","innerHeight","setPixelRatio","devicePixelRatio","setSize","setClearColor","duration","debug","easing","clicker","document","getElementById","container","images","JSON","parse","getAttribute","offsetWidth","offsetHeight","appendChild","domElement","camera","PerspectiveCamera","position","set","current","paused","initiate","console","log","setupResize","settings","addObjects","resize","clickEvent","play","cb","promises","that","forEach","url","i","promise","Promise","resolve","push","all","then","addEventListener","next","gui","GUI","Object","keys","item","add","bind","aspect","imageAspect","image","a1","a2","material","x","y","z","w","dist","fov","Math","PI","atan","plane","scale","updateProjectionMatrix","ShaderMaterial","extensions","derivatives","side","DoubleSide","vertexShader","fragmentShader","geometry","PlaneGeometry","Mesh","stop","render","isRunning","len","length","nextTexture","tl","to","ease","onComplete","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { TimelineMax, Power2 } from \"gsap/all\";\nimport * as dat from \"dat.gui\";\n\nclass Sketch extends Component {\n\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.vertex = `varying vec2 vUv;void main() {vUv = uv;gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );}`;\n    this.fragment = `\n\t\tuniform float time;\n\t\tuniform float progress;\n\t\tuniform float intensity;\n\t\tuniform float width;\n\t\tuniform float scaleX;\n\t\tuniform float scaleY;\n\t\tuniform float transition;\n\t\tuniform float radius;\n\t\tuniform float swipe;\n\t\tuniform sampler2D texture1;\n\t\tuniform sampler2D texture2;\n\t\tuniform sampler2D displacement;\n\t\tuniform vec4 resolution;\n\t\tvarying vec2 vUv;\n\t\tmat2 rotate(float a) {\n\t\t\tfloat s = sin(a);\n\t\t\tfloat c = cos(a);\n\t\t\treturn mat2(c, -s, s, c);\n\t\t}\n\t\tconst float PI = 3.1415;\n\t\tconst float angle1 = PI *0.25;\n\t\tconst float angle2 = -PI *0.75;\n\n\n\t\tvoid main()\t{\n\t\t\tvec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\n\t\t\tvec2 uvDivided = fract(newUV*vec2(intensity,1.));\n\n\n\t\t\tvec2 uvDisplaced1 = newUV + rotate(3.1415926/4.)*uvDivided*progress*0.1;\n\t\t\tvec2 uvDisplaced2 = newUV + rotate(3.1415926/4.)*uvDivided*(1. - progress)*0.1;\n\n\t\t\tvec4 t1 = texture2D(texture1,uvDisplaced1);\n\t\t\tvec4 t2 = texture2D(texture2,uvDisplaced2);\n\n\t\t\tgl_FragColor = mix(t1, t2, progress);\n\n\t\t}\n\n\t`;\n    this.uniforms = {\n        time: { type: \"f\", value: 0 },\n        progress: { type: \"f\", value: 0 },\n        border: { type: \"f\", value: 0 },\n        // intensity: { type: \"f\", value: 0 },\n        intensity: { value: 50, type: \"f\", min: 1, max: 100 },\n        scaleX: { type: \"f\", value: 40 },\n        scaleY: { type: \"f\", value: 40 },\n        transition: { type: \"f\", value: 40 },\n        swipe: { type: \"f\", value: 0 },\n        width: { type: \"f\", value: 0 },\n        radius: { type: \"f\", value: 0 },\n        texture1: { type: \"f\", value: this.textures[0] },\n        texture2: { type: \"f\", value: this.textures[1] },\n        displacement: {\n          type: \"f\",\n          value: new THREE.TextureLoader().load(\"img/disp1.jpg\")\n        },\n        resolution: { type: \"v4\", value: new THREE.Vector4() }\n      };\n    this.renderer = new THREE.WebGLRenderer();\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setClearColor(0xeeeeee, 1);\n    this.duration = 1;\n    this.debug = true;\n    this.easing = \"easeInOut\";\n\n    this.clicker = document.getElementById(\"content\");\n\n    this.container = document.getElementById(\"slider\");\n    this.images = JSON.parse(this.container.getAttribute(\"data-images\"));\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.container.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      70,\n      window.innerWidth / window.innerHeight,\n      0.001,\n      1000\n    );\n\n    this.camera.position.set(0, 0, 2);\n    this.time = 0;\n    this.current = 0;\n    this.textures = [];\n\n    this.paused = true;\n    this.initiate(() => {\n      console.log(this.textures);\n      this.setupResize();\n      this.settings();\n      this.addObjects();\n      this.resize();\n      this.clickEvent();\n      this.play();\n    });\n  }\n\n  initiate(cb) {\n    const promises = [];\n    let that = this;\n    this.images.forEach((url, i) => {\n      let promise = new Promise(resolve => {\n        that.textures[i] = new THREE.TextureLoader().load(url, resolve);\n      });\n      promises.push(promise);\n    });\n\n    Promise.all(promises).then(() => {\n      cb();\n    });\n  }\n\n  clickEvent() {\n    this.clicker.addEventListener(\"click\", () => {\n      this.next();\n    });\n  }\n  settings() {\n    let that = this;\n    if (this.debug) this.gui = new dat.GUI();\n    this.settings = { progress: 0.5 };\n    // if(this.debug) this.gui.add(this.settings, \"progress\", 0, 1, 0.01);\n\n    Object.keys(this.uniforms).forEach(item => {\n      this.settings[item] = this.uniforms[item].value;\n      if (this.debug)\n        this.gui.add(\n          this.settings,\n          item,\n          this.uniforms[item].min,\n          this.uniforms[item].max,\n          0.01\n        );\n    });\n  }\n\n  setupResize() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  resize() {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n\n    // image cover\n    this.imageAspect =\n      this.textures[0].image.height / this.textures[0].image.width;\n    let a1;\n    let a2;\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2 * (180 / Math.PI) * Math.atan(height / (2 * dist));\n\n    this.plane.scale.x = this.camera.aspect;\n    this.plane.scale.y = 1;\n\n    this.camera.updateProjectionMatrix();\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        progress: { type: \"f\", value: 0 },\n        border: { type: \"f\", value: 0 },\n        intensity: { type: \"f\", value: 0 },\n        scaleX: { type: \"f\", value: 40 },\n        scaleY: { type: \"f\", value: 40 },\n        transition: { type: \"f\", value: 40 },\n        swipe: { type: \"f\", value: 0 },\n        width: { type: \"f\", value: 0 },\n        radius: { type: \"f\", value: 0 },\n        texture1: { type: \"f\", value: this.textures[0] },\n        texture2: { type: \"f\", value: this.textures[1] },\n        displacement: {\n          type: \"f\",\n          value: new THREE.TextureLoader().load(\"img/disp1.jpg\")\n        },\n        resolution: { type: \"v4\", value: new THREE.Vector4() }\n      },\n      // wireframe: true,\n      vertexShader: this.vertex,\n      fragmentShader: this.fragment\n    });\n\n    this.geometry = new THREE.PlaneGeometry(1, 1, 2, 2);\n\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.plane);\n  }\n\n  stop() {\n    this.paused = true;\n  }\n\n  play() {\n    this.paused = false;\n    this.render();\n  }\n\n  next() {\n    if (this.isRunning) return;\n    this.isRunning = true;\n    let len = this.textures.length;\n    let nextTexture = this.textures[(this.current + 1) % len];\n    this.material.uniforms.texture2.value = nextTexture;\n    let tl = new TimelineMax();\n    tl.to(this.material.uniforms.progress, this.duration, {\n      value: 1,\n      ease: Power2[this.easing],\n      onComplete: () => {\n        console.log(\"FINISH\");\n        this.current = (this.current + 1) % len;\n        this.material.uniforms.texture1.value = nextTexture;\n        this.material.uniforms.progress.value = 0;\n        this.isRunning = false;\n      }\n    });\n  }\n\n  render() {\n    if (this.paused) return;\n    this.time += 0.05;\n    this.uniforms.time.value = this.time;\n    // this.material.uniforms.progress.value = this.settings.progress;\n\n    Object.keys(this.uniforms).forEach(item => {\n      this.material.uniforms[item].value = this.settings[item];\n    });\n\n    // this.camera.position.z = 3;\n    // this.plane.rotation.y = 0.4*Math.sin(this.time)\n    // this.plane.rotation.x = 0.5*Math.sin(0.4*this.time)\n\n    requestAnimationFrame(this.render.bind(this));\n    this.renderer.render(this.scene, this.camera);\n\n    return (\n      <div id=\"content\" className=\"content\">\n        <div\n          id=\"slider\"\n          data-images='[\n        \"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/11/Webglimagetransitions_featured.jpg\",\n        \"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/10/g.png\",\n        \"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/10/uv.jpg\",\n        \"LaPrinciere4.jpg\",\n        \"LaPrinciere-Web1.jpg\",\n        \"LaPrinciere-Web5.jpg\",\n        \"LaPrinciere-Web4.jpg\",\n        \"LaPrinciere-Web3.jpg\"\n    ]'\n        ></div>\n      </div>\n    );\n  }\n}\n\nexport default Sketch;\n"]},"metadata":{},"sourceType":"module"}