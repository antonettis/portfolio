{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _webgltextureLoader = require(\"webgltexture-loader\");\n\nclass VideoTextureLoader extends _webgltextureLoader.WebGLTextureLoaderAsyncHashCache {\n  canLoad(input) {\n    return input instanceof HTMLVideoElement;\n  }\n\n  inputHash(input) {\n    return input;\n  }\n\n  loadNoCache(input) {\n    const gl = this.gl;\n    const width = input.width,\n          height = input.height;\n    let timeout;\n\n    const dispose = () => {\n      clearTimeout(timeout);\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      const checkVideoReady = () => {\n        if (input.videoWidth > 0) {\n          const texture = gl.createTexture();\n          const width = input.videoWidth,\n                height = input.videoHeight;\n          gl.bindTexture(gl.TEXTURE_2D, texture);\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, input);\n          resolve({\n            texture,\n            width,\n            height\n          });\n        } else {\n          timeout = setTimeout(checkVideoReady, 100);\n        }\n      };\n\n      checkVideoReady();\n    });\n    return {\n      dispose,\n      promise\n    };\n  }\n\n  update(input) {\n    const gl = this.gl;\n    const res = this.get(input);\n    if (!res) return;\n    gl.bindTexture(gl.TEXTURE_2D, res.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, input);\n  }\n\n}\n\n_webgltextureLoader.globalRegistry.add(VideoTextureLoader);\n\nvar _default = VideoTextureLoader;\nexports.default = _default;","map":{"version":3,"sources":["../src/VideoTextureLoader.js"],"names":["WebGLTextureLoaderAsyncHashCache","canLoad","input","inputHash","loadNoCache","gl","height","dispose","clearTimeout","promise","checkVideoReady","texture","videoWidth","videoHeight","resolve","timeout","setTimeout","update","res","globalRegistry","VideoTextureLoader"],"mappings":";;;;;;;AACA,IAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AAKA,MAAA,kBAAA,SAAiCA,mBAAAA,CAAjC,gCAAA,CAEE;AACAC,EAAAA,OAAO,CAAA,KAAA,EAAa;AAClB,WAAOC,KAAK,YAAZ,gBAAA;AACD;;AAEDC,EAAAA,SAAS,CAAA,KAAA,EAA0B;AACjC,WAAA,KAAA;AACD;;AAEDC,EAAAA,WAAW,CAAA,KAAA,EAA0B;AAAA,UAC3BC,EAD2B,GACnC,IADmC,CAC3BA,EAD2B;AAAA,UAE7B,KAF6B,GAEnC,KAFmC,CAE7B,KAF6B;AAAA,UAEpBC,MAFoB,GAEnC,KAFmC,CAEpBA,MAFoB;AAInC,QAAA,OAAA;;AACA,UAAMC,OAAO,GAAG,MAAM;AACpBC,MAAAA,YAAY,CAAZA,OAAY,CAAZA;AADF,KAAA;;AAIA,UAAMC,OAAO,GAAG,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAqB;AAC/C,YAAMC,eAAe,GAAG,MAAM;AAC5B,YAAIR,KAAK,CAALA,UAAAA,GAAJ,CAAA,EAA0B;AACxB,gBAAMS,OAAO,GAAGN,EAAE,CAAlB,aAAgBA,EAAhB;AADwB,gBAElB,KAFkB,GAExB,KAFwB,CAEhBO,UAFgB;AAAA,gBAEgBN,MAFhB,GAExB,KAFwB,CAEGO,WAFH;AAGxBR,UAAAA,EAAE,CAAFA,WAAAA,CAAeA,EAAE,CAAjBA,UAAAA,EAAAA,OAAAA;AACAA,UAAAA,EAAE,CAAFA,UAAAA,CACEA,EAAE,CADJA,UAAAA,EAAAA,CAAAA,EAGEA,EAAE,CAHJA,IAAAA,EAIEA,EAAE,CAJJA,IAAAA,EAKEA,EAAE,CALJA,aAAAA,EAAAA,KAAAA;AAQAS,UAAAA,OAAO,CAAC;AAAA,YAAA,OAAA;AAAA,YAAA,KAAA;AAGNR,YAAAA;AAHM,WAAD,CAAPQ;AAZF,SAAA,MAiBO;AACLC,UAAAA,OAAO,GAAGC,UAAU,CAAA,eAAA,EAApBD,GAAoB,CAApBA;AACD;AApBH,OAAA;;AAsBAL,MAAAA,eAAe;AAvBjB,KAAgB,CAAhB;AA0BA,WAAO;AAAA,MAAA,OAAA;AAAWD,MAAAA;AAAX,KAAP;AACD;;AAEDQ,EAAAA,MAAM,CAAA,KAAA,EAA0B;AAAA,UACtBZ,EADsB,GAC9B,IAD8B,CACtBA,EADsB;AAE9B,UAAMa,GAAG,GAAG,KAAA,GAAA,CAAZ,KAAY,CAAZ;AACA,QAAI,CAAJ,GAAA,EAAU;AACVb,IAAAA,EAAE,CAAFA,WAAAA,CAAeA,EAAE,CAAjBA,UAAAA,EAA8Ba,GAAG,CAAjCb,OAAAA;AACAA,IAAAA,EAAE,CAAFA,UAAAA,CAAcA,EAAE,CAAhBA,UAAAA,EAAAA,CAAAA,EAAgCA,EAAE,CAAlCA,IAAAA,EAAyCA,EAAE,CAA3CA,IAAAA,EAAkDA,EAAE,CAApDA,aAAAA,EAAAA,KAAAA;AACD;;AArDD;;AAwDFc,mBAAAA,CAAAA,cAAAA,CAAAA,GAAAA,CAAAA,kBAAAA;;eAEeC,kB","sourcesContent":["//@flow\nimport {\n  WebGLTextureLoaderAsyncHashCache,\n  globalRegistry\n} from \"webgltexture-loader\";\n\nclass VideoTextureLoader extends WebGLTextureLoaderAsyncHashCache<\n  HTMLVideoElement\n> {\n  canLoad(input: any) {\n    return input instanceof HTMLVideoElement;\n  }\n\n  inputHash(input: HTMLVideoElement) {\n    return input;\n  }\n\n  loadNoCache(input: HTMLVideoElement) {\n    const { gl } = this;\n    const { width, height } = input;\n\n    let timeout;\n    const dispose = () => {\n      clearTimeout(timeout);\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      const checkVideoReady = () => {\n        if (input.videoWidth > 0) {\n          const texture = gl.createTexture();\n          const { videoWidth: width, videoHeight: height } = input;\n          gl.bindTexture(gl.TEXTURE_2D, texture);\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            input\n          );\n          resolve({\n            texture,\n            width,\n            height\n          });\n        } else {\n          timeout = setTimeout(checkVideoReady, 100);\n        }\n      };\n      checkVideoReady();\n    });\n\n    return { dispose, promise };\n  }\n\n  update(input: HTMLVideoElement) {\n    const { gl } = this;\n    const res = this.get(input);\n    if (!res) return;\n    gl.bindTexture(gl.TEXTURE_2D, res.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, input);\n  }\n}\n\nglobalRegistry.add(VideoTextureLoader);\n\nexport default VideoTextureLoader;\n"]},"metadata":{},"sourceType":"script"}