{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = GLSL;\nexports.GLSLSymbol = void 0;\nconst GLSLSymbol = \"GLSL\";\n/**\n * object created by **GLSL``** string template\n */\n\nexports.GLSLSymbol = GLSLSymbol;\n/**\n * GLSL string template to write your shader.\n * The library use a string template for esthetic reason (e.g. syntax color support) but also so we can more strongly type things.\n * Note that later, we might do static analysis to generate at compile time the uniform types for instance.\n * See [GLSL spec](http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf).\n *\n * @return {GLSLCode}, an object you can give to `Shaders.create`'s `frag`.\n * @example\n * GLSL`\n * precision highp float;\n * varying vec2 uv;\n * void main() {\n *   gl_FragColor = vec4(uv.x, uv.y, 0.5, 1.0);\n * }\n * `\n */\n\nfunction GLSL(strings, ...values) {\n  let code = \"\";\n\n  for (let i = 0; i < strings.length; i++) {\n    code += (i === 0 ? \"\" : values[i - 1]) + strings[i];\n  }\n\n  return code;\n}","map":{"version":3,"sources":["../src/GLSL.js"],"names":["GLSLSymbol","code","i","strings","values"],"mappings":";;;;;;;AACO,MAAMA,UAAU,GAAhB,MAAA;AAEP;;;;;AAMA;;;;;;;;;;;;;;;;;AAgBe,SAAA,IAAA,CAAA,OAAA,EAEb,GAFa,MAAA,EAGH;AACV,MAAIC,IAAI,GAAR,EAAA;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGC,OAAO,CAA3B,MAAA,EAAoCD,CAApC,EAAA,EAAyC;AACvCD,IAAAA,IAAI,IAAI,CAACC,CAAC,KAADA,CAAAA,GAAAA,EAAAA,GAAeE,MAAM,CAACF,CAAC,GAAxB,CAAsB,CAAtB,IAAiCC,OAAO,CAAhDF,CAAgD,CAAhDA;AACD;;AACD,SAAA,IAAA;AACD","sourcesContent":["//@flow\nexport const GLSLSymbol = \"GLSL\";\n\n/**\n * object created by **GLSL``** string template\n */\ntype GLSLCode = string;\nexport type { GLSLCode };\n\n/**\n * GLSL string template to write your shader.\n * The library use a string template for esthetic reason (e.g. syntax color support) but also so we can more strongly type things.\n * Note that later, we might do static analysis to generate at compile time the uniform types for instance.\n * See [GLSL spec](http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf).\n *\n * @return {GLSLCode}, an object you can give to `Shaders.create`'s `frag`.\n * @example\n * GLSL`\n * precision highp float;\n * varying vec2 uv;\n * void main() {\n *   gl_FragColor = vec4(uv.x, uv.y, 0.5, 1.0);\n * }\n * `\n */\nexport default function GLSL(\n  strings: Array<string>,\n  ...values: Array<string>\n): GLSLCode {\n  let code = \"\";\n  for (let i = 0; i < strings.length; i++) {\n    code += (i === 0 ? \"\" : values[i - 1]) + strings[i];\n  }\n  return code;\n}\n"]},"metadata":{},"sourceType":"script"}