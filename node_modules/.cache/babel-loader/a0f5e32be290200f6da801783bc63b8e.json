{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ndarray = _interopRequireDefault(require(\"ndarray\"));\n\nvar _ndarrayOps = _interopRequireDefault(require(\"ndarray-ops\"));\n\nvar _typedarrayPool = _interopRequireDefault(require(\"typedarray-pool\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nif (typeof Buffer === \"undefined\") {\n  var _class, _temp;\n\n  global.Buffer = (_temp = _class = class Buffer {}, _defineProperty(_class, \"isBuffer\", b => b instanceof Buffer), _temp);\n} // code is partly taken from https://github.com/stackgl/gl-texture2d/blob/master/texture.js\n\n\nfunction isPacked(shape, stride) {\n  if (shape.length === 3) {\n    return stride[2] === 1 && stride[1] === shape[0] * shape[2] && stride[0] === shape[2];\n  }\n\n  return stride[0] === 1 && stride[1] === shape[0];\n}\n\nfunction convertFloatToUint8(out, inp) {\n  _ndarrayOps.default.muls(out, inp, 255.0);\n}\n\nvar _default = (gl, texture, array, floatSupported) => {\n  let dtype = array.dtype;\n  let shape = array.shape.slice();\n  let maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n\n  if (shape[0] < 0 || shape[0] > maxSize || shape[1] < 0 || shape[1] > maxSize) {\n    throw new Error(\"gl-react: Invalid texture size\");\n  }\n\n  let packed = isPacked(shape, array.stride.slice());\n  let type = 0;\n\n  if (dtype === \"float32\") {\n    type = gl.FLOAT;\n  } else if (dtype === \"float64\") {\n    type = gl.FLOAT;\n    packed = false;\n    dtype = \"float32\";\n  } else if (dtype === \"uint8\") {\n    type = gl.UNSIGNED_BYTE;\n  } else {\n    type = gl.UNSIGNED_BYTE;\n    packed = false;\n    dtype = \"uint8\";\n  }\n\n  let format = 0;\n\n  if (shape.length === 2) {\n    format = gl.LUMINANCE;\n    shape = [shape[0], shape[1], 1];\n    array = (0, _ndarray.default)(array.data, shape, [array.stride[0], array.stride[1], 1], array.offset);\n  } else if (shape.length === 3) {\n    if (shape[2] === 1) {\n      format = gl.ALPHA;\n    } else if (shape[2] === 2) {\n      format = gl.LUMINANCE_ALPHA;\n    } else if (shape[2] === 3) {\n      format = gl.RGB;\n    } else if (shape[2] === 4) {\n      format = gl.RGBA;\n    } else {\n      throw new Error(\"gl-texture2d: Invalid shape for pixel coords\");\n    }\n  } else {\n    throw new Error(\"gl-texture2d: Invalid shape for texture\");\n  }\n\n  if (type === gl.FLOAT && !floatSupported) {\n    type = gl.UNSIGNED_BYTE;\n    packed = false;\n  }\n\n  let buffer, buf_store;\n  let size = array.size;\n\n  if (!packed) {\n    let stride = [shape[2], shape[2] * shape[0], 1];\n    buf_store = _typedarrayPool.default.malloc(size, dtype);\n    let buf_array = (0, _ndarray.default)(buf_store, shape, stride, 0);\n\n    if ((dtype === \"float32\" || dtype === \"float64\") && type === gl.UNSIGNED_BYTE) {\n      convertFloatToUint8(buf_array, array);\n    } else {\n      _ndarrayOps.default.assign(buf_array, array);\n    }\n\n    buffer = buf_store.subarray(0, size);\n  } else if (array.offset === 0 && array.data.length === size) {\n    buffer = array.data;\n  } else {\n    buffer = array.data.subarray(array.offset, array.offset + size);\n  }\n\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, shape[0], shape[1], 0, format, type, buffer);\n\n  if (buf_store) {\n    _typedarrayPool.default.free(buf_store);\n  }\n};\n\nexports.default = _default;","map":{"version":3,"sources":["../src/drawNDArrayTexture.js"],"names":["global","b","shape","stride","ops","dtype","array","maxSize","gl","packed","isPacked","type","format","size","buf_store","pool","buf_array","convertFloatToUint8","buffer"],"mappings":"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","sourcesContent":["//@flow\nimport type { NDArray } from \"ndarray\";\nimport ndarray from \"ndarray\";\nimport ops from \"ndarray-ops\";\nimport pool from \"typedarray-pool\";\n\nif (typeof Buffer === \"undefined\") {\n  global.Buffer = class Buffer {\n    // mock shim so pool don't crash..\n    static isBuffer = b => b instanceof Buffer;\n  };\n}\n\n// code is partly taken from https://github.com/stackgl/gl-texture2d/blob/master/texture.js\n\nfunction isPacked(shape, stride) {\n  if (shape.length === 3) {\n    return (\n      stride[2] === 1 &&\n      stride[1] === shape[0] * shape[2] &&\n      stride[0] === shape[2]\n    );\n  }\n  return stride[0] === 1 && stride[1] === shape[0];\n}\n\nfunction convertFloatToUint8(out, inp) {\n  ops.muls(out, inp, 255.0);\n}\n\nexport default (\n  gl: WebGLRenderingContext,\n  texture: WebGLTexture,\n  array: NDArray,\n  floatSupported: boolean\n) => {\n  let dtype = array.dtype;\n  let shape = array.shape.slice();\n  let maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  if (\n    shape[0] < 0 ||\n    shape[0] > maxSize ||\n    shape[1] < 0 ||\n    shape[1] > maxSize\n  ) {\n    throw new Error(\"gl-react: Invalid texture size\");\n  }\n  let packed = isPacked(shape, array.stride.slice());\n  let type = 0;\n  if (dtype === \"float32\") {\n    type = gl.FLOAT;\n  } else if (dtype === \"float64\") {\n    type = gl.FLOAT;\n    packed = false;\n    dtype = \"float32\";\n  } else if (dtype === \"uint8\") {\n    type = gl.UNSIGNED_BYTE;\n  } else {\n    type = gl.UNSIGNED_BYTE;\n    packed = false;\n    dtype = \"uint8\";\n  }\n  let format = 0;\n  if (shape.length === 2) {\n    format = gl.LUMINANCE;\n    shape = [shape[0], shape[1], 1];\n    array = ndarray(\n      array.data,\n      shape,\n      [array.stride[0], array.stride[1], 1],\n      array.offset\n    );\n  } else if (shape.length === 3) {\n    if (shape[2] === 1) {\n      format = gl.ALPHA;\n    } else if (shape[2] === 2) {\n      format = gl.LUMINANCE_ALPHA;\n    } else if (shape[2] === 3) {\n      format = gl.RGB;\n    } else if (shape[2] === 4) {\n      format = gl.RGBA;\n    } else {\n      throw new Error(\"gl-texture2d: Invalid shape for pixel coords\");\n    }\n  } else {\n    throw new Error(\"gl-texture2d: Invalid shape for texture\");\n  }\n  if (type === gl.FLOAT && !floatSupported) {\n    type = gl.UNSIGNED_BYTE;\n    packed = false;\n  }\n  let buffer, buf_store;\n  let size = array.size;\n  if (!packed) {\n    let stride = [shape[2], shape[2] * shape[0], 1];\n    buf_store = pool.malloc(size, dtype);\n    let buf_array = ndarray(buf_store, shape, stride, 0);\n    if (\n      (dtype === \"float32\" || dtype === \"float64\") &&\n      type === gl.UNSIGNED_BYTE\n    ) {\n      convertFloatToUint8(buf_array, array);\n    } else {\n      ops.assign(buf_array, array);\n    }\n    buffer = buf_store.subarray(0, size);\n  } else if (array.offset === 0 && array.data.length === size) {\n    buffer = array.data;\n  } else {\n    buffer = array.data.subarray(array.offset, array.offset + size);\n  }\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    format,\n    shape[0],\n    shape[1],\n    0,\n    format,\n    type,\n    buffer\n  );\n  if (buf_store) {\n    pool.free(buf_store);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}