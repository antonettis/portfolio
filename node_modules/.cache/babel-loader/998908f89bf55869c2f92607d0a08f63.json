{"ast":null,"code":"var _jsxFileName = \"/Users/serenaantonetti/portfolio-2019/src/components/Sketch.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { TimelineMax, Power2 } from \"gsap/all\";\nimport * as dat from \"dat.gui\";\n\nclass Sketch extends Component {\n  constructor(opts) {\n    super(opts);\n    this.scene = new THREE.Scene();\n    this.vertex = `varying vec2 vUv;void main() {vUv = uv;gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );}`; // this.fragment = opts.fragment;\n\n    this.fragment = `\n\t\tuniform float time;\n\t\tuniform float progress;\n\t\tuniform float width;\n\t\tuniform float scaleX;\n\t\tuniform float scaleY;\n\t\tuniform float transition;\n\t\tuniform float radius;\n\t\tuniform float intensity;\n\t\tuniform sampler2D texture1;\n\t\tuniform sampler2D texture2;\n\t\tuniform sampler2D displacement;\n\t\tuniform vec4 resolution;\n\t\tvarying vec2 vUv;\n\n\t\tvoid main()\t{\n\t\t  vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\n         vec4 d1 = texture2D(texture1, newUV);\n         vec4 d2 = texture2D(texture2, newUV);\n\n         float displace1 = (d1.r + d1.g + d1.b)*0.33;\n         float displace2 = (d2.r + d2.g + d2.b)*0.33;\n         \n         vec4 t1 = texture2D(texture1, vec2(newUV.x, newUV.y + progress * (displace2 * intensity)));\n         vec4 t2 = texture2D(texture2, vec2(newUV.x, newUV.y + (1.0 - progress) * (displace1 * intensity)));\n\n         gl_FragColor = mix(t1, t2, progress);\n\n\t\t}\n\n\t`; // this.uniforms = opts.uniforms;\n\n    this.uniforms = {\n      intensity: {\n        value: 0.3,\n        type: \"f\",\n        min: 0,\n        max: 2\n      }\n    };\n    this.renderer = new THREE.WebGLRenderer();\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setClearColor(0xeeeeee, 1);\n    this.duration = opts.duration || 1;\n    this.debug = opts.debug || false;\n    this.easing = opts.easing || \"easeInOut\";\n  }\n\n  componentDidMount() {\n    this.clicker = document.getElementById(\"content\");\n    this.container = document.getElementById(\"slider\");\n    this.images = JSON.parse(this.container.getAttribute(\"data-images\"));\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight; // this.container.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.001, 1000);\n    this.camera.position.set(0, 0, 2);\n    this.time = 0;\n    this.current = 0;\n    this.textures = [];\n    this.paused = true; // this.initiate(() => {\n    //   console.log(this.textures);\n    //   this.setupResize();\n    //   this.settings();\n    //   this.addObjects();\n    //   this.resize();\n    //   this.clickEvent();\n    //   this.play();\n    // });\n\n    this.clickEvent();\n    this.settings();\n    this.setupResize(); // this.resize();\n\n    this.addObjects();\n    this.stop();\n    this.play();\n    this.next();\n    this.render();\n  }\n\n  initiate(cb) {\n    const promises = [];\n    let that = this;\n    this.images.forEach((url, i) => {\n      let promise = new Promise(resolve => {\n        that.textures[i] = new THREE.TextureLoader().load(url, resolve);\n      });\n      promises.push(promise);\n    });\n    Promise.all(promises).then(() => {\n      cb();\n    });\n  }\n\n  clickEvent() {\n    this.clicker.addEventListener(\"click\", () => {\n      this.next();\n    });\n  }\n\n  settings() {\n    let that = this;\n    if (this.debug) this.gui = new dat.GUI();\n    this.settings = {\n      progress: 0.5\n    }; // if(this.debug) this.gui.add(this.settings, \"progress\", 0, 1, 0.01);\n\n    Object.keys(this.uniforms).forEach(item => {\n      this.settings[item] = this.uniforms[item].value;\n      if (this.debug) this.gui.add(this.settings, item, this.uniforms[item].min, this.uniforms[item].max, 0.01);\n    });\n    console.log(\"it;s working\");\n  }\n\n  setupResize() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  resize() {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    this.imageAspect = this.textures[0].image.height / this.textures[0].image.width;\n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = this.width / this.height * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2 * (180 / Math.PI) * Math.atan(height / (2 * dist));\n    this.plane.scale.x = this.camera.aspect;\n    this.plane.scale.y = 1;\n    this.camera.updateProjectionMatrix();\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        intensity: {\n          value: 0.3,\n          type: \"f\",\n          min: 0,\n          max: 2\n        },\n        scaleX: {\n          type: \"f\",\n          value: 40\n        },\n        scaleY: {\n          type: \"f\",\n          value: 40\n        },\n        transition: {\n          type: \"f\",\n          value: 40\n        },\n        swipe: {\n          type: \"f\",\n          value: 0\n        },\n        width: {\n          type: \"f\",\n          value: 0\n        },\n        radius: {\n          type: \"f\",\n          value: 0\n        },\n        texture1: {\n          type: \"f\",\n          value: this.textures[0]\n        },\n        texture2: {\n          type: \"f\",\n          value: this.textures[1]\n        },\n        displacement: {\n          type: \"f\",\n          value: new THREE.TextureLoader().load(\"../img/disp1.jpg\")\n        },\n        resolution: {\n          type: \"v4\",\n          value: new THREE.Vector4()\n        }\n      },\n      // wireframe: true,\n      vertexShader: this.vertex,\n      fragmentShader: this.fragment\n    });\n    this.geometry = new THREE.PlaneGeometry(1, 1, 2, 2);\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.plane);\n  }\n\n  stop() {\n    this.paused = true;\n  }\n\n  play() {\n    this.paused = false;\n    this.render();\n  }\n\n  next() {\n    if (this.isRunning) return;\n    this.isRunning = true;\n    let len = this.textures.length;\n    let nextTexture = this.textures[(this.current + 1) % len];\n    this.material.uniforms.texture2.value = nextTexture;\n    let tl = new TimelineMax();\n    tl.to(this.material.uniforms.progress, this.duration, {\n      value: 1,\n      ease: Power2[this.easing],\n      onComplete: () => {\n        console.log(\"FINISH\");\n        this.current = (this.current + 1) % len;\n        this.material.uniforms.texture1.value = nextTexture;\n        this.material.uniforms.progress.value = 0;\n        this.isRunning = false;\n      }\n    });\n  } // render() {\n  //   if (this.paused) return;\n  //   this.time += 0.05;\n  //   this.material.uniforms.time.value = this.time;\n  //   // this.material.uniforms.progress.value = this.settings.progress;\n  //   Object.keys(this.uniforms).forEach(item => {\n  //     this.material.uniforms[item].value = this.settings[item];\n  //   });\n  //   // this.camera.position.z = 3;\n  //   // this.plane.rotation.y = 0.4*Math.sin(this.time)\n  //   // this.plane.rotation.x = 0.5*Math.sin(0.4*this.time)\n  //   requestAnimationFrame(this.render.bind(this));\n  //   this.renderer.render(this.scene, this.camera);\n  // }\n\n\n  render() {\n    //   let sketch = new Sketch({\n    //     debug: true,\n    //     uniforms: {\n    //       intensity: { value: 0.3, type: \"f\", min: 0, max: 2 }\n    //     },\n    //     fragment: `\n    // \tuniform float time;\n    // \tuniform float progress;\n    // \tuniform float width;\n    // \tuniform float scaleX;\n    // \tuniform float scaleY;\n    // \tuniform float transition;\n    // \tuniform float radius;\n    // \tuniform float intensity;\n    // \tuniform sampler2D texture1;\n    // \tuniform sampler2D texture2;\n    // \tuniform sampler2D displacement;\n    // \tuniform vec4 resolution;\n    // \tvarying vec2 vUv;\n    // \tvoid main()\t{\n    // \t  vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n    //        vec4 d1 = texture2D(texture1, newUV);\n    //        vec4 d2 = texture2D(texture2, newUV);\n    //        float displace1 = (d1.r + d1.g + d1.b)*0.33;\n    //        float displace2 = (d2.r + d2.g + d2.b)*0.33;\n    //        vec4 t1 = texture2D(texture1, vec2(newUV.x, newUV.y + progress * (displace2 * intensity)));\n    //        vec4 t2 = texture2D(texture2, vec2(newUV.x, newUV.y + (1.0 - progress) * (displace1 * intensity)));\n    //        gl_FragColor = mix(t1, t2, progress);\n    // \t}\n    // `\n    //   });\n    return React.createElement(\"div\", {\n      id: \"content\",\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"slider\",\n      \"data-images\": \"[ \\\"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/11/Webglimagetransitions_featured.jpg\\\", \\\"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/10/g.png\\\", \\\"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/10/uv.jpg\\\", \\\"LaPrinciere4.jpg\\\", \\\"LaPrinciere-Web1.jpg\\\", \\\"LaPrinciere-Web5.jpg\\\", \\\"LaPrinciere-Web4.jpg\\\", \\\"LaPrinciere-Web3.jpg\\\" ]\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Sketch;","map":{"version":3,"sources":["/Users/serenaantonetti/portfolio-2019/src/components/Sketch.js"],"names":["React","Component","THREE","TimelineMax","Power2","dat","Sketch","constructor","opts","scene","Scene","vertex","fragment","uniforms","intensity","value","type","min","max","renderer","WebGLRenderer","width","window","innerWidth","height","innerHeight","setPixelRatio","devicePixelRatio","setSize","setClearColor","duration","debug","easing","componentDidMount","clicker","document","getElementById","container","images","JSON","parse","getAttribute","offsetWidth","offsetHeight","camera","PerspectiveCamera","position","set","time","current","textures","paused","clickEvent","settings","setupResize","addObjects","stop","play","next","render","initiate","cb","promises","that","forEach","url","i","promise","Promise","resolve","TextureLoader","load","push","all","then","addEventListener","gui","GUI","progress","Object","keys","item","add","console","log","resize","bind","aspect","imageAspect","image","a1","a2","material","resolution","x","y","z","w","dist","fov","Math","PI","atan","plane","scale","updateProjectionMatrix","ShaderMaterial","extensions","derivatives","side","DoubleSide","scaleX","scaleY","transition","swipe","radius","texture1","texture2","displacement","Vector4","vertexShader","fragmentShader","geometry","PlaneGeometry","Mesh","isRunning","len","length","nextTexture","tl","to","ease","onComplete"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { TimelineMax, Power2 } from \"gsap/all\";\nimport * as dat from \"dat.gui\";\n\nclass Sketch extends Component {\n  constructor(opts) {\n    super(opts);\n    this.scene = new THREE.Scene();\n    this.vertex = `varying vec2 vUv;void main() {vUv = uv;gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );}`;\n    // this.fragment = opts.fragment;\n    this.fragment = `\n\t\tuniform float time;\n\t\tuniform float progress;\n\t\tuniform float width;\n\t\tuniform float scaleX;\n\t\tuniform float scaleY;\n\t\tuniform float transition;\n\t\tuniform float radius;\n\t\tuniform float intensity;\n\t\tuniform sampler2D texture1;\n\t\tuniform sampler2D texture2;\n\t\tuniform sampler2D displacement;\n\t\tuniform vec4 resolution;\n\t\tvarying vec2 vUv;\n\n\t\tvoid main()\t{\n\t\t  vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\n         vec4 d1 = texture2D(texture1, newUV);\n         vec4 d2 = texture2D(texture2, newUV);\n\n         float displace1 = (d1.r + d1.g + d1.b)*0.33;\n         float displace2 = (d2.r + d2.g + d2.b)*0.33;\n         \n         vec4 t1 = texture2D(texture1, vec2(newUV.x, newUV.y + progress * (displace2 * intensity)));\n         vec4 t2 = texture2D(texture2, vec2(newUV.x, newUV.y + (1.0 - progress) * (displace1 * intensity)));\n\n         gl_FragColor = mix(t1, t2, progress);\n\n\t\t}\n\n\t`;\n    // this.uniforms = opts.uniforms;\n    this.uniforms = { intensity: { value: 0.3, type: \"f\", min: 0, max: 2 } };\n    this.renderer = new THREE.WebGLRenderer();\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setClearColor(0xeeeeee, 1);\n    this.duration = opts.duration || 1;\n    this.debug = opts.debug || false;\n    this.easing = opts.easing || \"easeInOut\";\n  }\n\n  componentDidMount() {\n    this.clicker = document.getElementById(\"content\");\n\n    this.container = document.getElementById(\"slider\");\n    this.images = JSON.parse(this.container.getAttribute(\"data-images\"));\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    \n    // this.container.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      70,\n      window.innerWidth / window.innerHeight,\n      0.001,\n      1000\n    );\n\n    this.camera.position.set(0, 0, 2);\n    this.time = 0;\n    this.current = 0;\n    this.textures = [];\n\n    this.paused = true;\n    // this.initiate(() => {\n    //   console.log(this.textures);\n    //   this.setupResize();\n    //   this.settings();\n    //   this.addObjects();\n    //   this.resize();\n    //   this.clickEvent();\n    //   this.play();\n    // });\n    this.clickEvent();\n    this.settings();\n    this.setupResize();\n    // this.resize();\n    this.addObjects();\n    this.stop();\n    this.play();\n    this.next();\n    this.render();\n  }\n\n  initiate(cb) {\n    const promises = [];\n    let that = this;\n    this.images.forEach((url, i) => {\n      let promise = new Promise(resolve => {\n        that.textures[i] = new THREE.TextureLoader().load(url, resolve);\n      });\n      promises.push(promise);\n    });\n\n    Promise.all(promises).then(() => {\n      cb();\n    });\n  }\n\n  clickEvent() {\n    this.clicker.addEventListener(\"click\", () => {\n      this.next();\n    });\n  }\n\n  settings() {\n    let that = this;\n    if (this.debug) this.gui = new dat.GUI();\n    this.settings = { progress: 0.5 };\n    // if(this.debug) this.gui.add(this.settings, \"progress\", 0, 1, 0.01);\n\n    Object.keys(this.uniforms).forEach(item => {\n      this.settings[item] = this.uniforms[item].value;\n      if (this.debug)\n        this.gui.add(\n          this.settings,\n          item,\n          this.uniforms[item].min,\n          this.uniforms[item].max,\n          0.01\n        );\n    });\n    console.log(\"it;s working\");\n  }\n\n  setupResize() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  resize() {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    this.imageAspect = this.textures[0].image.height / this.textures[0].image.width;\n    let a1;\n    let a2;\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2 * (180 / Math.PI) * Math.atan(height / (2 * dist));\n\n    this.plane.scale.x = this.camera.aspect;\n    this.plane.scale.y = 1;\n\n    this.camera.updateProjectionMatrix();\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n      },\n      side: THREE.DoubleSide,\n\n      uniforms: {\n        intensity: { value: 0.3, type: \"f\", min: 0, max: 2 },\n        scaleX: { type: \"f\", value: 40 },\n        scaleY: { type: \"f\", value: 40 },\n        transition: { type: \"f\", value: 40 },\n        swipe: { type: \"f\", value: 0 },\n        width: { type: \"f\", value: 0 },\n        radius: { type: \"f\", value: 0 },\n        texture1: { type: \"f\", value: this.textures[0] },\n        texture2: { type: \"f\", value: this.textures[1] },\n        displacement: {\n          type: \"f\",\n          value: new THREE.TextureLoader().load(\"../img/disp1.jpg\")\n        },\n        resolution: { type: \"v4\", value: new THREE.Vector4() }\n      },\n      // wireframe: true,\n      vertexShader: this.vertex,\n      fragmentShader: this.fragment\n    });\n\n    this.geometry = new THREE.PlaneGeometry(1, 1, 2, 2);\n\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.plane);\n  }\n\n  stop() {\n    this.paused = true;\n  }\n\n  play() {\n    this.paused = false;\n    this.render();\n  }\n\n  next() {\n    if (this.isRunning) return;\n    this.isRunning = true;\n    let len = this.textures.length;\n    let nextTexture = this.textures[(this.current + 1) % len];\n    this.material.uniforms.texture2.value = nextTexture;\n    let tl = new TimelineMax();\n    tl.to(this.material.uniforms.progress, this.duration, {\n      value: 1,\n      ease: Power2[this.easing],\n      onComplete: () => {\n        console.log(\"FINISH\");\n        this.current = (this.current + 1) % len;\n        this.material.uniforms.texture1.value = nextTexture;\n        this.material.uniforms.progress.value = 0;\n        this.isRunning = false;\n      }\n    });\n  }\n\n  // render() {\n  //   if (this.paused) return;\n  //   this.time += 0.05;\n  //   this.material.uniforms.time.value = this.time;\n  //   // this.material.uniforms.progress.value = this.settings.progress;\n\n  //   Object.keys(this.uniforms).forEach(item => {\n  //     this.material.uniforms[item].value = this.settings[item];\n  //   });\n  //   // this.camera.position.z = 3;\n  //   // this.plane.rotation.y = 0.4*Math.sin(this.time)\n  //   // this.plane.rotation.x = 0.5*Math.sin(0.4*this.time)\n\n  //   requestAnimationFrame(this.render.bind(this));\n  //   this.renderer.render(this.scene, this.camera);\n  // }\n\n  render() {\n    //   let sketch = new Sketch({\n    //     debug: true,\n    //     uniforms: {\n    //       intensity: { value: 0.3, type: \"f\", min: 0, max: 2 }\n    //     },\n    //     fragment: `\n    // \tuniform float time;\n    // \tuniform float progress;\n    // \tuniform float width;\n    // \tuniform float scaleX;\n    // \tuniform float scaleY;\n    // \tuniform float transition;\n    // \tuniform float radius;\n    // \tuniform float intensity;\n    // \tuniform sampler2D texture1;\n    // \tuniform sampler2D texture2;\n    // \tuniform sampler2D displacement;\n    // \tuniform vec4 resolution;\n    // \tvarying vec2 vUv;\n\n    // \tvoid main()\t{\n    // \t  vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\n    //        vec4 d1 = texture2D(texture1, newUV);\n    //        vec4 d2 = texture2D(texture2, newUV);\n\n    //        float displace1 = (d1.r + d1.g + d1.b)*0.33;\n    //        float displace2 = (d2.r + d2.g + d2.b)*0.33;\n\n    //        vec4 t1 = texture2D(texture1, vec2(newUV.x, newUV.y + progress * (displace2 * intensity)));\n    //        vec4 t2 = texture2D(texture2, vec2(newUV.x, newUV.y + (1.0 - progress) * (displace1 * intensity)));\n\n    //        gl_FragColor = mix(t1, t2, progress);\n\n    // \t}\n\n    // `\n    //   });\n\n    return (\n      <div id=\"content\" className=\"content\">\n        <div\n          id=\"slider\"\n          data-images='[\n        \"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/11/Webglimagetransitions_featured.jpg\",\n        \"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/10/g.png\",\n        \"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/10/uv.jpg\",\n        \"LaPrinciere4.jpg\",\n        \"LaPrinciere-Web1.jpg\",\n        \"LaPrinciere-Web5.jpg\",\n        \"LaPrinciere-Web4.jpg\",\n        \"LaPrinciere-Web3.jpg\"\n    ]'\n        ></div>\n      </div>\n    );\n  }\n}\n\nexport default Sketch;\n"]},"metadata":{},"sourceType":"module"}