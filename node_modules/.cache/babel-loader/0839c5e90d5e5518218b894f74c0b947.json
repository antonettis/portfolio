{"ast":null,"code":"var _jsxFileName = \"/Users/serenaantonetti/portfolio-2019/src/components/Sketch.js\";\nimport * as THREE from \"three\";\nimport { Tween, Timeline } from \"react-gsap\";\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    var geometry = new THREE.BoxGeometry(1, 1, 1);\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 5;\n\n    var animate = function () {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    animate(); // === THREE.JS EXAMPLE CODE END ===\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass Sketch {\n  constructor(opts) {\n    this.scene = new THREE.Scene();\n    this.vertex = `varying vec2 vUv;void main() {vUv = uv;gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );}`;\n    this.fragment = opts.fragment;\n    this.uniforms = opts.uniforms;\n    this.renderer = new THREE.WebGLRenderer();\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setClearColor(0xeeeeee, 1);\n    this.duration = opts.duration || 1;\n    this.debug = opts.debug || false;\n    this.easing = opts.easing || \"easeInOut\";\n    this.clicker = document.getElementById(\"content\");\n    this.container = document.getElementById(\"slider\");\n    this.images = JSON.parse(this.container.getAttribute(\"data-images\"));\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.container.appendChild(this.renderer.domElement);\n    this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.001, 1000);\n    this.camera.position.set(0, 0, 2);\n    this.time = 0;\n    this.current = 0;\n    this.textures = [];\n    this.paused = true;\n    this.initiate(() => {\n      console.log(this.textures);\n      this.setupResize();\n      this.settings();\n      this.addObjects();\n      this.resize();\n      this.clickEvent();\n      this.play();\n    });\n  }\n\n  initiate(cb) {\n    const promises = [];\n    let that = this;\n    this.images.forEach((url, i) => {\n      let promise = new Promise(resolve => {\n        that.textures[i] = new THREE.TextureLoader().load(url, resolve);\n      });\n      promises.push(promise);\n    });\n    Promise.all(promises).then(() => {\n      cb();\n    });\n  }\n\n  clickEvent() {\n    this.clicker.addEventListener(\"click\", () => {\n      this.next();\n    });\n  }\n\n  settings() {\n    let that = this;\n    if (this.debug) this.gui = new dat.GUI();\n    this.settings = {\n      progress: 0.5\n    }; // if(this.debug) this.gui.add(this.settings, \"progress\", 0, 1, 0.01);\n\n    Object.keys(this.uniforms).forEach(item => {\n      this.settings[item] = this.uniforms[item].value;\n      if (this.debug) this.gui.add(this.settings, item, this.uniforms[item].min, this.uniforms[item].max, 0.01);\n    });\n  }\n\n  setupResize() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  resize() {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height; // image cover\n\n    this.imageAspect = this.textures[0].image.height / this.textures[0].image.width;\n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = this.width / this.height * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2 * (180 / Math.PI) * Math.atan(height / (2 * dist));\n    this.plane.scale.x = this.camera.aspect;\n    this.plane.scale.y = 1;\n    this.camera.updateProjectionMatrix();\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: {\n          type: \"f\",\n          value: 0\n        },\n        progress: {\n          type: \"f\",\n          value: 0\n        },\n        border: {\n          type: \"f\",\n          value: 0\n        },\n        intensity: {\n          type: \"f\",\n          value: 0\n        },\n        scaleX: {\n          type: \"f\",\n          value: 40\n        },\n        scaleY: {\n          type: \"f\",\n          value: 40\n        },\n        transition: {\n          type: \"f\",\n          value: 40\n        },\n        swipe: {\n          type: \"f\",\n          value: 0\n        },\n        width: {\n          type: \"f\",\n          value: 0\n        },\n        radius: {\n          type: \"f\",\n          value: 0\n        },\n        texture1: {\n          type: \"f\",\n          value: this.textures[0]\n        },\n        texture2: {\n          type: \"f\",\n          value: this.textures[1]\n        },\n        displacement: {\n          type: \"f\",\n          value: new THREE.TextureLoader().load(\"../img/disp1.jpg\")\n        },\n        resolution: {\n          type: \"v4\",\n          value: new THREE.Vector4()\n        }\n      },\n      // wireframe: true,\n      vertexShader: this.vertex,\n      fragmentShader: this.fragment\n    });\n    this.geometry = new THREE.PlaneGeometry(1, 1, 2, 2);\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.plane);\n  }\n\n  stop() {\n    this.paused = true;\n  }\n\n  play() {\n    this.paused = false;\n    this.render();\n  }\n\n  next() {\n    if (this.isRunning) return;\n    this.isRunning = true;\n    let len = this.textures.length;\n    let nextTexture = this.textures[(this.current + 1) % len];\n    this.material.uniforms.texture2.value = nextTexture;\n    let tl = new TimelineMax();\n    tl.to(this.material.uniforms.progress, this.duration, {\n      value: 1,\n      ease: Power2[this.easing],\n      onComplete: () => {\n        console.log(\"FINISH\");\n        this.current = (this.current + 1) % len;\n        this.material.uniforms.texture1.value = nextTexture;\n        this.material.uniforms.progress.value = 0;\n        this.isRunning = false;\n      }\n    });\n  }\n\n  render() {\n    if (this.paused) return;\n    this.time += 0.05;\n    this.material.uniforms.time.value = this.time; // this.material.uniforms.progress.value = this.settings.progress;\n\n    Object.keys(this.uniforms).forEach(item => {\n      this.material.uniforms[item].value = this.settings[item];\n    });\n    Ï; // this.camera.position.z = 3;\n    // this.plane.rotation.y = 0.4*Math.sin(this.time)\n    // this.plane.rotation.x = 0.5*Math.sin(0.4*this.time)\n\n    requestAnimationFrame(this.render.bind(this));\n    this.renderer.render(this.scene, this.camera);\n  }\n\n}","map":{"version":3,"sources":["/Users/serenaantonetti/portfolio-2019/src/components/Sketch.js"],"names":["THREE","Tween","Timeline","App","Component","componentDidMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","Sketch","constructor","opts","vertex","fragment","uniforms","width","height","setPixelRatio","devicePixelRatio","setClearColor","duration","debug","easing","clicker","getElementById","container","images","JSON","parse","getAttribute","offsetWidth","offsetHeight","set","time","current","textures","paused","initiate","console","log","setupResize","settings","addObjects","resize","clickEvent","play","cb","promises","that","forEach","url","i","promise","Promise","resolve","TextureLoader","load","push","all","then","addEventListener","next","gui","dat","GUI","progress","Object","keys","item","value","min","max","bind","aspect","imageAspect","image","a1","a2","resolution","w","dist","fov","Math","PI","atan","plane","scale","updateProjectionMatrix","ShaderMaterial","extensions","derivatives","side","DoubleSide","type","border","intensity","scaleX","scaleY","transition","swipe","radius","texture1","texture2","displacement","Vector4","vertexShader","fragmentShader","PlaneGeometry","stop","isRunning","len","length","nextTexture","tl","TimelineMax","to","ease","Power2","onComplete","Ï"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport { Tween, Timeline } from \"react-gsap\";\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    var geometry = new THREE.BoxGeometry(1, 1, 1);\n    var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 5;\n    var animate = function() {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n    animate();\n    // === THREE.JS EXAMPLE CODE END ===\n  }\n  render() {\n    return <div />;\n  }\n}\n\nclass Sketch {\n  constructor(opts) {\n    this.scene = new THREE.Scene();\n    this.vertex = `varying vec2 vUv;void main() {vUv = uv;gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );}`;\n    this.fragment = opts.fragment;\n    this.uniforms = opts.uniforms;\n    this.renderer = new THREE.WebGLRenderer();\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setClearColor(0xeeeeee, 1);\n    this.duration = opts.duration || 1;\n    this.debug = opts.debug || false;\n    this.easing = opts.easing || \"easeInOut\";\n\n    this.clicker = document.getElementById(\"content\");\n\n    this.container = document.getElementById(\"slider\");\n    this.images = JSON.parse(this.container.getAttribute(\"data-images\"));\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.container.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      70,\n      window.innerWidth / window.innerHeight,\n      0.001,\n      1000\n    );\n\n    this.camera.position.set(0, 0, 2);\n    this.time = 0;\n    this.current = 0;\n    this.textures = [];\n\n    this.paused = true;\n    this.initiate(() => {\n      console.log(this.textures);\n      this.setupResize();\n      this.settings();\n      this.addObjects();\n      this.resize();\n      this.clickEvent();\n      this.play();\n    });\n  }\n\n  initiate(cb) {\n    const promises = [];\n    let that = this;\n    this.images.forEach((url, i) => {\n      let promise = new Promise(resolve => {\n        that.textures[i] = new THREE.TextureLoader().load(url, resolve);\n      });\n      promises.push(promise);\n    });\n\n    Promise.all(promises).then(() => {\n      cb();\n    });\n  }\n\n  clickEvent() {\n    this.clicker.addEventListener(\"click\", () => {\n      this.next();\n    });\n  }\n  settings() {\n    let that = this;\n    if (this.debug) this.gui = new dat.GUI();\n    this.settings = { progress: 0.5 };\n    // if(this.debug) this.gui.add(this.settings, \"progress\", 0, 1, 0.01);\n\n    Object.keys(this.uniforms).forEach(item => {\n      this.settings[item] = this.uniforms[item].value;\n      if (this.debug)\n        this.gui.add(\n          this.settings,\n          item,\n          this.uniforms[item].min,\n          this.uniforms[item].max,\n          0.01\n        );\n    });\n  }\n\n  setupResize() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  resize() {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n\n    // image cover\n    this.imageAspect =\n      this.textures[0].image.height / this.textures[0].image.width;\n    let a1;\n    let a2;\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2 * (180 / Math.PI) * Math.atan(height / (2 * dist));\n\n    this.plane.scale.x = this.camera.aspect;\n    this.plane.scale.y = 1;\n\n    this.camera.updateProjectionMatrix();\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        progress: { type: \"f\", value: 0 },\n        border: { type: \"f\", value: 0 },\n        intensity: { type: \"f\", value: 0 },\n        scaleX: { type: \"f\", value: 40 },\n        scaleY: { type: \"f\", value: 40 },\n        transition: { type: \"f\", value: 40 },\n        swipe: { type: \"f\", value: 0 },\n        width: { type: \"f\", value: 0 },\n        radius: { type: \"f\", value: 0 },\n        texture1: { type: \"f\", value: this.textures[0] },\n        texture2: { type: \"f\", value: this.textures[1] },\n        displacement: {\n          type: \"f\",\n          value: new THREE.TextureLoader().load(\"../img/disp1.jpg\")\n        },\n        resolution: { type: \"v4\", value: new THREE.Vector4() }\n      },\n      // wireframe: true,\n      vertexShader: this.vertex,\n      fragmentShader: this.fragment\n    });\n\n    this.geometry = new THREE.PlaneGeometry(1, 1, 2, 2);\n\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.plane);\n  }\n\n  stop() {\n    this.paused = true;\n  }\n\n  play() {\n    this.paused = false;\n    this.render();\n  }\n\n  next() {\n    if (this.isRunning) return;\n    this.isRunning = true;\n    let len = this.textures.length;\n    let nextTexture = this.textures[(this.current + 1) % len];\n    this.material.uniforms.texture2.value = nextTexture;\n    let tl = new TimelineMax();\n    tl.to(this.material.uniforms.progress, this.duration, {\n      value: 1,\n      ease: Power2[this.easing],\n      onComplete: () => {\n        console.log(\"FINISH\");\n        this.current = (this.current + 1) % len;\n        this.material.uniforms.texture1.value = nextTexture;\n        this.material.uniforms.progress.value = 0;\n        this.isRunning = false;\n      }\n    });\n  }\n  render() {\n    if (this.paused) return;\n    this.time += 0.05;\n    this.material.uniforms.time.value = this.time;\n    // this.material.uniforms.progress.value = this.settings.progress;\n\n    Object.keys(this.uniforms).forEach(item => {\n      this.material.uniforms[item].value = this.settings[item];\n    });\n    Ï;\n    // this.camera.position.z = 3;\n    // this.plane.rotation.y = 0.4*Math.sin(this.time)\n    // this.plane.rotation.x = 0.5*Math.sin(0.4*this.time)\n\n    requestAnimationFrame(this.render.bind(this));\n    this.renderer.render(this.scene, this.camera);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}