{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _webgltextureLoader = require(\"webgltexture-loader\");\n\nfunction loadImage(src, success, failure) {\n  let img = new window.Image();\n\n  if (src.slice(0, 5) !== \"data:\") {\n    img.crossOrigin = true;\n  }\n\n  img.onload = function () {\n    if (img) {\n      success(img);\n    }\n\n    img = null;\n  };\n\n  img.onabort = img.onerror = failure;\n  img.src = src;\n  return function () {\n    if (img) {\n      img.onload = null;\n      img.onerror = null;\n      img.onabort = null;\n      img.src = \"\";\n      img = null;\n    }\n  };\n}\n\nclass ImageURLTextureLoader extends _webgltextureLoader.WebGLTextureLoaderAsyncHashCache {\n  canLoad(input) {\n    return typeof input === \"string\";\n  }\n\n  inputHash(input) {\n    return input;\n  }\n\n  loadNoCache(src) {\n    const gl = this.gl;\n    let dispose;\n    const promise = new Promise((success, failure) => dispose = loadImage(src, success, failure)).then(img => {\n      const width = img.width,\n            height = img.height;\n      const texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\n      return {\n        texture,\n        width,\n        height\n      };\n    });\n    return {\n      promise,\n      dispose: () => dispose()\n    };\n  }\n\n}\n\n_webgltextureLoader.globalRegistry.add(ImageURLTextureLoader);\n\nvar _default = ImageURLTextureLoader;\nexports.default = _default;","map":{"version":3,"sources":["../src/ImageURLTextureLoader.js"],"names":["img","window","src","success","WebGLTextureLoaderAsyncHashCache","canLoad","inputHash","loadNoCache","gl","promise","dispose","loadImage","height","texture","globalRegistry","ImageURLTextureLoader"],"mappings":";;;;;;;AACA,IAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AAKA,SAAA,SAAA,CAAA,GAAA,EAAA,OAAA,EAAA,OAAA,EAIE;AACA,MAAIA,GAAG,GAAG,IAAIC,MAAM,CAApB,KAAU,EAAV;;AACA,MAAIC,GAAG,CAAHA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAJ,OAAA,EAAiC;AAC/BF,IAAAA,GAAG,CAAHA,WAAAA,GAAAA,IAAAA;AACD;;AACDA,EAAAA,GAAG,CAAHA,MAAAA,GAAa,YAAW;AACtB,QAAA,GAAA,EAAS;AACPG,MAAAA,OAAO,CAAPA,GAAO,CAAPA;AACD;;AACDH,IAAAA,GAAG,GAAHA,IAAAA;AAJFA,GAAAA;;AAMAA,EAAAA,GAAG,CAAHA,OAAAA,GAAcA,GAAG,CAAHA,OAAAA,GAAdA,OAAAA;AACAA,EAAAA,GAAG,CAAHA,GAAAA,GAAAA,GAAAA;AACA,SAAO,YAAW;AAChB,QAAA,GAAA,EAAS;AACPA,MAAAA,GAAG,CAAHA,MAAAA,GAAAA,IAAAA;AACAA,MAAAA,GAAG,CAAHA,OAAAA,GAAAA,IAAAA;AACAA,MAAAA,GAAG,CAAHA,OAAAA,GAAAA,IAAAA;AACAA,MAAAA,GAAG,CAAHA,GAAAA,GAAAA,EAAAA;AACAA,MAAAA,GAAG,GAAHA,IAAAA;AACD;AAPH,GAAA;AASD;;AACD,MAAA,qBAAA,SAAoCI,mBAAAA,CAApC,gCAAA,CAA6E;AAC3EC,EAAAA,OAAO,CAAA,KAAA,EAAa;AAClB,WAAO,OAAA,KAAA,KAAP,QAAA;AACD;;AAEDC,EAAAA,SAAS,CAAA,KAAA,EAAgB;AACvB,WAAA,KAAA;AACD;;AAEDC,EAAAA,WAAW,CAAA,GAAA,EAAc;AAAA,UACfC,EADe,GACvB,IADuB,CACfA,EADe;AAEvB,QAAA,OAAA;AACA,UAAMC,OAAO,GAAG,IAAA,OAAA,CACd,CAAA,OAAA,EAAA,OAAA,KAAuBC,OAAO,GAAGC,SAAS,CAAA,GAAA,EAAA,OAAA,EAD5B,OAC4B,CAD5B,EAAA,IAAA,CAETX,GAAG,IAAI;AAAA,YACN,KADM,GACZ,GADY,CACN,KADM;AAAA,YACGY,MADH,GACZ,GADY,CACGA,MADH;AAEZ,YAAMC,OAAO,GAAGL,EAAE,CAAlB,aAAgBA,EAAhB;AACAA,MAAAA,EAAE,CAAFA,WAAAA,CAAeA,EAAE,CAAjBA,UAAAA,EAAAA,OAAAA;AACAA,MAAAA,EAAE,CAAFA,UAAAA,CAAcA,EAAE,CAAhBA,UAAAA,EAAAA,CAAAA,EAAgCA,EAAE,CAAlCA,IAAAA,EAAyCA,EAAE,CAA3CA,IAAAA,EAAkDA,EAAE,CAApDA,aAAAA,EAAAA,GAAAA;AACA,aAAO;AAAA,QAAA,OAAA;AAAA,QAAA,KAAA;AAAkBI,QAAAA;AAAlB,OAAP;AAPF,KAAgB,CAAhB;AASA,WAAO;AAAA,MAAA,OAAA;AAAWF,MAAAA,OAAO,EAAE,MAAMA,OAAO;AAAjC,KAAP;AACD;;AAtB0E;;AAyB7EI,mBAAAA,CAAAA,cAAAA,CAAAA,GAAAA,CAAAA,qBAAAA;;eAEeC,qB","sourcesContent":["//@flow\nimport {\n  globalRegistry,\n  WebGLTextureLoaderAsyncHashCache\n} from \"webgltexture-loader\";\n\nfunction loadImage(\n  src: string,\n  success: (img: Image) => void,\n  failure: (e: Error) => void\n) {\n  let img = new window.Image();\n  if (src.slice(0, 5) !== \"data:\") {\n    img.crossOrigin = true;\n  }\n  img.onload = function() {\n    if (img) {\n      success(img);\n    }\n    img = null;\n  };\n  img.onabort = img.onerror = failure;\n  img.src = src;\n  return function() {\n    if (img) {\n      img.onload = null;\n      img.onerror = null;\n      img.onabort = null;\n      img.src = \"\";\n      img = null;\n    }\n  };\n}\nclass ImageURLTextureLoader extends WebGLTextureLoaderAsyncHashCache<string> {\n  canLoad(input: any) {\n    return typeof input === \"string\";\n  }\n\n  inputHash(input: string) {\n    return input;\n  }\n\n  loadNoCache(src: string) {\n    const { gl } = this;\n    let dispose;\n    const promise = new Promise(\n      (success, failure) => (dispose = loadImage(src, success, failure))\n    ).then(img => {\n      const { width, height } = img;\n      const texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\n      return { texture, width, height };\n    });\n    return { promise, dispose: () => dispose() };\n  }\n}\n\nglobalRegistry.add(ImageURLTextureLoader);\n\nexport default ImageURLTextureLoader;\n"]},"metadata":{},"sourceType":"script"}