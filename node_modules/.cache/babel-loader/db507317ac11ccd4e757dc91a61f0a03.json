{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _globalRegistry = _interopRequireDefault(require(\"./globalRegistry\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass LoaderResolver {\n  constructor(gl, registry = _globalRegistry.default) {\n    _defineProperty(this, \"loaders\", void 0);\n\n    this.loaders = registry.get().map(L => new L(gl));\n  }\n\n  dispose() {\n    this.loaders.forEach(l => l.dispose());\n  }\n\n  resolve(input) {\n    return this.loaders.find(loader => loader.canLoad(input));\n  }\n\n}\n\nexports.default = LoaderResolver;","map":{"version":3,"sources":["../src/LoaderResolver.js"],"names":["constructor","registry","globalRegistry","L","dispose","l","resolve","loader"],"mappings":";;;;;;;AAGA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;AAEe,MAAA,cAAA,CAAqB;AAGlCA,EAAAA,WAAW,CAAA,EAAA,EAETC,QAAyB,GAAGC,eAAAA,CAFnB,OAAA,EAGT;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;;AACA,SAAA,OAAA,GAAeD,QAAQ,CAARA,GAAAA,GAAAA,GAAAA,CAAmBE,CAAC,IAAI,IAAA,CAAA,CAAvC,EAAuC,CAAxBF,CAAf;AACD;;AAEDG,EAAAA,OAAO,GAAG;AACR,SAAA,OAAA,CAAA,OAAA,CAAqBC,CAAC,IAAIA,CAAC,CAA3B,OAA0BA,EAA1B;AACD;;AAEDC,EAAAA,OAAO,CAAA,KAAA,EAAsC;AAC3C,WAAO,KAAA,OAAA,CAAA,IAAA,CAAkBC,MAAM,IAAIA,MAAM,CAANA,OAAAA,CAAnC,KAAmCA,CAA5B,CAAP;AACD;;AAhBiC","sourcesContent":["//@flow\nimport type LoadersRegistry from \"./LoadersRegistry\";\nimport type WebGLTextureLoader from \"./WebGLTextureLoader\";\nimport globalRegistry from \"./globalRegistry\";\n\nexport default class LoaderResolver {\n  loaders: Array<WebGLTextureLoader<*>>;\n\n  constructor(\n    gl: WebGLRenderingContext,\n    registry: LoadersRegistry = globalRegistry\n  ) {\n    this.loaders = registry.get().map(L => new L(gl));\n  }\n\n  dispose() {\n    this.loaders.forEach(l => l.dispose());\n  }\n\n  resolve<T>(input: T): ?WebGLTextureLoader<T> {\n    return this.loaders.find(loader => loader.canLoad(input));\n  }\n}\n"]},"metadata":{},"sourceType":"script"}