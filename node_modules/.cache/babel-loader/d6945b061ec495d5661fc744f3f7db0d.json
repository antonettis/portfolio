{"ast":null,"code":"var _jsxFileName = \"/Users/serenaantonetti/portfolio-2019/src/infrastructure/routes/PageTransitions.jsx\";\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport PropTypes from 'prop-types';\nimport Queue from 'promise-queue';\nexport default class PageTransition extends React.Component {\n  static compareChildren(prevChild, nextChild) {\n    if (prevChild && prevChild.props && prevChild.props['data-transition-id'] && nextChild.props && nextChild.props['data-transition-id']) {\n      return prevChild.props['data-transition-id'] === nextChild.props['data-transition-id'];\n    }\n\n    return prevChild === nextChild;\n  }\n\n  constructor(...args) {\n    super(...args);\n\n    if (this.props.animateOnInit) {\n      this.state = {\n        child1: null,\n        child2: null,\n        nextChild: 1\n      };\n    } else {\n      this.state = {\n        child1: this.props.children,\n        child2: null,\n        nextChild: 2\n      };\n    }\n\n    this.transite = this.transite.bind(this);\n    this.getRef = this.getRef.bind(this);\n    this.queue = new Queue(1, Infinity); // max concurrent 1, max queue Inf\n  }\n\n  componentDidMount() {\n    if (!this.props.animateOnInit) {\n      const child = this.getRef('child1');\n\n      if (child) {\n        const dom = ReactDom.findDOMNode(child);\n        child.onTransitionDidEnd && child.onTransitionDidEnd(this.props.data);\n        dom.classList.remove('transition-item');\n\n        if (this.hasTransitionAction()) {\n          dom.classList.remove(`transition-${this.props.transitionAction}`);\n        }\n      }\n    } else {\n      this.transite(this.props.children);\n    }\n  }\n\n  getDerivedStateFromProps(nextProps) {\n    const transitNewChild = () => {\n      this.queue.add(() => this.transite(nextProps.children));\n    };\n\n    const updateChild = () => {\n      const currentChild = this.state.nextChild === 1 ? 2 : 1;\n      this.state[`child${currentChild}`] = nextProps.children;\n      this.forceUpdate();\n    };\n\n    const isChildrenEqual = this.props.compareChildren || PageTransition.compareChildren;\n    isChildrenEqual(this.props.children, nextProps.children) ? updateChild() : transitNewChild();\n  }\n\n  getRef(ref) {\n    let child = this.refs[ref]; // Dirty way to check if the component is\n    // wrapped with react-redux Connect\n\n    if (child && child.getWrappedInstance) {\n      child = child.getWrappedInstance();\n    }\n\n    return child;\n  }\n\n  hasTransitionAction() {\n    return this.props.transitionAction && this.props.transitionAction != '';\n  }\n\n  transite(nextChild) {\n    return new Promise((transiteDone, transiteFailed) => {\n      // Render the new children\n      this.state[`child${this.state.nextChild}`] = nextChild;\n      this.forceUpdate(() => {\n        const prevChild = this.getRef(`child${this.state.nextChild === 1 ? 2 : 1}`);\n        const newChild = this.getRef(`child${this.state.nextChild}`);\n        const prevChildDom = ReactDom.findDOMNode(prevChild);\n        const newChildDom = ReactDom.findDOMNode(newChild);\n        let timeout = 0; // Before add appear class\n\n        const willStart = () => {\n          if (newChild.onTransitionWillStart) {\n            return newChild.onTransitionWillStart(this.props.data) || Promise.resolve();\n          }\n\n          if (prevChild && prevChild.onTransitionLeaveWillStart) {\n            return prevChild.onTransitionLeaveWillStart(this.props.data) || Promise.resolve();\n          }\n\n          return Promise.resolve();\n        }; // Add appear class and active class (or trigger manual start)\n\n\n        const start = () => {\n          if (newChildDom.classList.contains('transition-item')) {\n            timeout = this.props.timeout;\n            newChildDom.classList.add('transition-appear');\n\n            if (this.hasTransitionAction()) {\n              newChildDom.classList.add(`transition-${this.props.transitionAction}`);\n            }\n\n            newChildDom.offsetHeight; // Trigger layout to make sure transition happen\n\n            if (newChild.transitionManuallyStart) {\n              return newChild.transitionManuallyStart(this.props.data, start) || Promise.resolve();\n            }\n\n            newChildDom.classList.add('transition-appear-active');\n          }\n\n          if (prevChildDom) {\n            prevChildDom.classList.add('transition-leave');\n            prevChildDom.classList.add('transition-item');\n\n            if (this.hasTransitionAction()) {\n              prevChildDom.classList.add(`transition-${this.props.transitionAction}`);\n            }\n\n            timeout = this.props.timeout;\n            prevChildDom.offsetHeight; // Trigger layout to make sure transition happen\n\n            if (prevChild.transitionLeaveManuallyStart) {\n              return prevChild.transitionLeaveManuallyStart(this.props.data, start) || Promise.resolve();\n            }\n\n            prevChildDom.classList.add('transition-leave-active');\n          }\n\n          return Promise.resolve();\n        }; // After add classes\n\n\n        const didStart = () => {\n          if (newChild.onTransitionDidStart) {\n            return newChild.onTransitionDidStart(this.props.data) || Promise.resolve();\n          }\n\n          if (prevChild && prevChild.onTransitionLeaveDidStart) {\n            return prevChild.onTransitionLeaveDidStart(this.props.data) || Promise.resolve();\n          }\n\n          return Promise.resolve();\n        }; // Wait for transition\n\n\n        const waitForTransition = () => new Promise(resolve => {\n          setTimeout(() => {\n            // Swap child and remove the old child\n            this.state.nextChild = this.state.nextChild === 1 ? 2 : 1;\n            this.state[`child${this.state.nextChild}`] = null;\n            this.forceUpdate(resolve);\n          }, timeout);\n        }); // Before remove classes\n\n\n        const willEnd = () => {\n          if (newChild.onTransitionWillEnd) {\n            return newChild.onTransitionWillEnd(this.props.data) || Promise.resolve();\n          }\n\n          if (prevChild && prevChild.onTransitionLeaveWillEnd) {\n            return prevChild.onTransitionLeaveWillEnd(this.props.data) || Promise.resolve();\n          }\n\n          return Promise.resolve();\n        }; // Remove appear and active class (or trigger manual end)\n\n\n        const end = () => {\n          if (newChildDom.classList.contains('transition-item')) {\n            newChildDom.classList.remove('transition-appear');\n            newChildDom.classList.remove('transition-item');\n\n            if (newChild.transitionManuallyStop) {\n              return newChild.transitionManuallyStop(this.props.data) || Promise.resolve();\n            }\n\n            if (this.hasTransitionAction()) {\n              newChildDom.classList.remove(`transition-${this.props.transitionAction}`);\n            }\n\n            newChildDom.classList.remove('transition-appear-active');\n          }\n\n          if (prevChildDom && prevChildDom.classList.contains('transition-item')) {\n            prevChildDom.classList.remove('transition-leave');\n            prevChildDom.classList.remove('transition-item');\n\n            if (prevChild.transitionLeaveManuallyStop) {\n              return prevChild.transitionLeaveManuallyStop(this.props.data) || Promise.resolve();\n            }\n\n            if (this.hasTransitionAction()) {\n              prevChildDom.classList.remove(`transition-${this.props.transitionAction}`);\n            }\n\n            prevChildDom.classList.remove('transition-leave-active');\n          }\n\n          return Promise.resolve();\n        }; // After remove classes\n\n\n        const didEnd = () => {\n          if (newChild.onTransitionDidEnd) {\n            return newChild.onTransitionDidEnd(this.props.data) || Promise.resolve();\n          }\n\n          if (prevChild && prevChild.onTransitionLeaveDidEnd) {\n            return prevChild.onTransitionLeaveDidEnd(this.props.data) || Promise.resolve();\n          }\n\n          return Promise.resolve();\n        };\n\n        Promise.resolve().then(willStart).then(start).then(didStart).then(waitForTransition).then(willEnd).then(end).then(didEnd).then(() => {\n          this.props.onLoad && this.props.onLoad();\n          transiteDone();\n        }).catch(transiteFailed);\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"transition-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.Children.map(this.state.child1, element => React.cloneElement(element, {\n      ref: 'child1'\n    })), React.Children.map(this.state.child2, element => React.cloneElement(element, {\n      ref: 'child2'\n    })));\n  }\n\n}\nPageTransition.propTypes = {\n  'data-transition-id': PropTypes.string,\n  data: PropTypes.object,\n  animateOnInit: PropTypes.bool,\n  timeout: PropTypes.number,\n  compareChildren: PropTypes.func,\n  transitionAction: PropTypes.string\n};\nPageTransition.defaultProps = {\n  timeout: 500\n};","map":{"version":3,"sources":["/Users/serenaantonetti/portfolio-2019/src/infrastructure/routes/PageTransitions.jsx"],"names":["React","ReactDom","PropTypes","Queue","PageTransition","Component","compareChildren","prevChild","nextChild","props","constructor","args","animateOnInit","state","child1","child2","children","transite","bind","getRef","queue","Infinity","componentDidMount","child","dom","findDOMNode","onTransitionDidEnd","data","classList","remove","hasTransitionAction","transitionAction","getDerivedStateFromProps","nextProps","transitNewChild","add","updateChild","currentChild","forceUpdate","isChildrenEqual","ref","refs","getWrappedInstance","Promise","transiteDone","transiteFailed","newChild","prevChildDom","newChildDom","timeout","willStart","onTransitionWillStart","resolve","onTransitionLeaveWillStart","start","contains","offsetHeight","transitionManuallyStart","transitionLeaveManuallyStart","didStart","onTransitionDidStart","onTransitionLeaveDidStart","waitForTransition","setTimeout","willEnd","onTransitionWillEnd","onTransitionLeaveWillEnd","end","transitionManuallyStop","transitionLeaveManuallyStop","didEnd","onTransitionLeaveDidEnd","then","onLoad","catch","render","Children","map","element","cloneElement","propTypes","string","object","bool","number","func","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDom from 'react-dom';\nimport PropTypes from 'prop-types';\nimport Queue from 'promise-queue';\n\nexport default class PageTransition extends React.Component {\n  static compareChildren(prevChild, nextChild) {\n    if (\n      prevChild &&\n      prevChild.props &&\n      prevChild.props['data-transition-id'] &&\n      nextChild.props &&\n      nextChild.props['data-transition-id']\n    ) {\n      return (\n        prevChild.props['data-transition-id'] ===\n        nextChild.props['data-transition-id']\n      );\n    }\n    return prevChild === nextChild;\n  }\n\n  constructor(...args) {\n    super(...args);\n    if (this.props.animateOnInit) {\n      this.state = {\n        child1: null,\n        child2: null,\n        nextChild: 1,\n      };\n    } else {\n      this.state = {\n        child1: this.props.children,\n        child2: null,\n        nextChild: 2,\n      };\n    }\n    this.transite = this.transite.bind(this);\n    this.getRef = this.getRef.bind(this);\n\n    this.queue = new Queue(1, Infinity); // max concurrent 1, max queue Inf\n  }\n\n  componentDidMount() {\n    if (!this.props.animateOnInit) {\n      const child = this.getRef('child1');\n      if (child) {\n        const dom = ReactDom.findDOMNode(child);\n        child.onTransitionDidEnd && child.onTransitionDidEnd(this.props.data);\n        dom.classList.remove('transition-item');\n        if (this.hasTransitionAction()) {\n          dom.classList.remove(`transition-${this.props.transitionAction}`);\n        }\n      }\n    } else {\n      this.transite(this.props.children);\n    }\n  }\n\n  getDerivedStateFromProps(nextProps) {\n    const transitNewChild = () => {\n      this.queue.add(() => this.transite(nextProps.children));\n    };\n    const updateChild = () => {\n      const currentChild = this.state.nextChild === 1 ? 2 : 1;\n      this.state[`child${currentChild}`] = nextProps.children;\n      this.forceUpdate();\n    };\n\n    const isChildrenEqual =\n      this.props.compareChildren || PageTransition.compareChildren;\n    isChildrenEqual(this.props.children, nextProps.children)\n      ? updateChild()\n      : transitNewChild();\n  }\n\n  getRef(ref) {\n    let child = this.refs[ref];\n    // Dirty way to check if the component is\n    // wrapped with react-redux Connect\n    if (child && child.getWrappedInstance) {\n      child = child.getWrappedInstance();\n    }\n    return child;\n  }\n\n  hasTransitionAction() {\n    return this.props.transitionAction && this.props.transitionAction != '';\n  }\n\n  transite(nextChild) {\n    return new Promise((transiteDone, transiteFailed) => {\n      // Render the new children\n      this.state[`child${this.state.nextChild}`] = nextChild;\n      this.forceUpdate(() => {\n        const prevChild = this.getRef(\n          `child${this.state.nextChild === 1 ? 2 : 1}`,\n        );\n        const newChild = this.getRef(`child${this.state.nextChild}`);\n        const prevChildDom = ReactDom.findDOMNode(prevChild);\n        const newChildDom = ReactDom.findDOMNode(newChild);\n        let timeout = 0;\n\n        // Before add appear class\n        const willStart = () => {\n          if (newChild.onTransitionWillStart) {\n            return (\n              newChild.onTransitionWillStart(this.props.data) ||\n              Promise.resolve()\n            );\n          }\n          if (prevChild && prevChild.onTransitionLeaveWillStart) {\n            return (\n              prevChild.onTransitionLeaveWillStart(this.props.data) ||\n              Promise.resolve()\n            );\n          }\n          return Promise.resolve();\n        };\n\n        // Add appear class and active class (or trigger manual start)\n        const start = () => {\n          if (newChildDom.classList.contains('transition-item')) {\n            timeout = this.props.timeout;\n            newChildDom.classList.add('transition-appear');\n            if (this.hasTransitionAction()) {\n              newChildDom.classList.add(\n                `transition-${this.props.transitionAction}`,\n              );\n            }\n            newChildDom.offsetHeight; // Trigger layout to make sure transition happen\n            if (newChild.transitionManuallyStart) {\n              return (\n                newChild.transitionManuallyStart(this.props.data, start) ||\n                Promise.resolve()\n              );\n            }\n            newChildDom.classList.add('transition-appear-active');\n          }\n          if (prevChildDom) {\n            prevChildDom.classList.add('transition-leave');\n            prevChildDom.classList.add('transition-item');\n            if (this.hasTransitionAction()) {\n              prevChildDom.classList.add(\n                `transition-${this.props.transitionAction}`,\n              );\n            }\n            timeout = this.props.timeout;\n            prevChildDom.offsetHeight; // Trigger layout to make sure transition happen\n            if (prevChild.transitionLeaveManuallyStart) {\n              return (\n                prevChild.transitionLeaveManuallyStart(\n                  this.props.data,\n                  start,\n                ) || Promise.resolve()\n              );\n            }\n            prevChildDom.classList.add('transition-leave-active');\n          }\n          return Promise.resolve();\n        };\n\n        // After add classes\n        const didStart = () => {\n          if (newChild.onTransitionDidStart) {\n            return (\n              newChild.onTransitionDidStart(this.props.data) ||\n              Promise.resolve()\n            );\n          }\n          if (prevChild && prevChild.onTransitionLeaveDidStart) {\n            return (\n              prevChild.onTransitionLeaveDidStart(this.props.data) ||\n              Promise.resolve()\n            );\n          }\n          return Promise.resolve();\n        };\n\n        // Wait for transition\n        const waitForTransition = () =>\n          new Promise(resolve => {\n            setTimeout(() => {\n              // Swap child and remove the old child\n              this.state.nextChild = this.state.nextChild === 1 ? 2 : 1;\n              this.state[`child${this.state.nextChild}`] = null;\n              this.forceUpdate(resolve);\n            }, timeout);\n          });\n\n        // Before remove classes\n        const willEnd = () => {\n          if (newChild.onTransitionWillEnd) {\n            return (\n              newChild.onTransitionWillEnd(this.props.data) || Promise.resolve()\n            );\n          }\n          if (prevChild && prevChild.onTransitionLeaveWillEnd) {\n            return (\n              prevChild.onTransitionLeaveWillEnd(this.props.data) ||\n              Promise.resolve()\n            );\n          }\n          return Promise.resolve();\n        };\n\n        // Remove appear and active class (or trigger manual end)\n        const end = () => {\n          if (newChildDom.classList.contains('transition-item')) {\n            newChildDom.classList.remove('transition-appear');\n            newChildDom.classList.remove('transition-item');\n\n            if (newChild.transitionManuallyStop) {\n              return (\n                newChild.transitionManuallyStop(this.props.data) ||\n                Promise.resolve()\n              );\n            }\n            if (this.hasTransitionAction()) {\n              newChildDom.classList.remove(\n                `transition-${this.props.transitionAction}`,\n              );\n            }\n            newChildDom.classList.remove('transition-appear-active');\n          }\n          if (\n            prevChildDom &&\n            prevChildDom.classList.contains('transition-item')\n          ) {\n            prevChildDom.classList.remove('transition-leave');\n            prevChildDom.classList.remove('transition-item');\n\n            if (prevChild.transitionLeaveManuallyStop) {\n              return (\n                prevChild.transitionLeaveManuallyStop(this.props.data) ||\n                Promise.resolve()\n              );\n            }\n            if (this.hasTransitionAction()) {\n              prevChildDom.classList.remove(\n                `transition-${this.props.transitionAction}`,\n              );\n            }\n            prevChildDom.classList.remove('transition-leave-active');\n          }\n          return Promise.resolve();\n        };\n\n        // After remove classes\n        const didEnd = () => {\n          if (newChild.onTransitionDidEnd) {\n            return (\n              newChild.onTransitionDidEnd(this.props.data) || Promise.resolve()\n            );\n          }\n          if (prevChild && prevChild.onTransitionLeaveDidEnd) {\n            return (\n              prevChild.onTransitionLeaveDidEnd(this.props.data) ||\n              Promise.resolve()\n            );\n          }\n          return Promise.resolve();\n        };\n\n        Promise.resolve()\n          .then(willStart)\n          .then(start)\n          .then(didStart)\n          .then(waitForTransition)\n          .then(willEnd)\n          .then(end)\n          .then(didEnd)\n          .then(() => {\n            this.props.onLoad && this.props.onLoad();\n            transiteDone();\n          })\n          .catch(transiteFailed);\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"transition-wrapper\">\n        {React.Children.map(this.state.child1, element =>\n          React.cloneElement(element, { ref: 'child1' }),\n        )}\n        {React.Children.map(this.state.child2, element =>\n          React.cloneElement(element, { ref: 'child2' }),\n        )}\n      </div>\n    );\n  }\n}\n\nPageTransition.propTypes = {\n  'data-transition-id': PropTypes.string,\n  data: PropTypes.object,\n  animateOnInit: PropTypes.bool,\n  timeout: PropTypes.number,\n  compareChildren: PropTypes.func,\n  transitionAction: PropTypes.string,\n};\n\nPageTransition.defaultProps = {\n  timeout: 500,\n};\n"]},"metadata":{},"sourceType":"module"}