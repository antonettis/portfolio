{"ast":null,"code":"var _jsxFileName = \"/Users/serenaantonetti/portfolio-2019/src/components/Sketch.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { TimelineMax, Power2 } from \"gsap/all\";\nimport * as dat from \"dat.gui\";\n\nclass Sketch extends Component {\n  constructor(opts) {\n    super(opts);\n    this.scene = new THREE.Scene();\n    this.vertex = `varying vec2 vUv;void main() {vUv = uv;gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );}`; // this.fragment = opts.fragment;\n\n    this.fragment = `\n\t\tuniform float time;\n\t\tuniform float progress;\n\t\tuniform float width;\n\t\tuniform float scaleX;\n\t\tuniform float scaleY;\n\t\tuniform float transition;\n\t\tuniform float radius;\n\t\tuniform float intensity;\n\t\tuniform sampler2D texture1;\n\t\tuniform sampler2D texture2;\n\t\tuniform sampler2D displacement;\n\t\tuniform vec4 resolution;\n\t\tvarying vec2 vUv;\n\n\t\tvoid main()\t{\n\t\t  vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\n         vec4 d1 = texture2D(texture1, newUV);\n         vec4 d2 = texture2D(texture2, newUV);\n\n         float displace1 = (d1.r + d1.g + d1.b)*0.33;\n         float displace2 = (d2.r + d2.g + d2.b)*0.33;\n         \n         vec4 t1 = texture2D(texture1, vec2(newUV.x, newUV.y + progress * (displace2 * intensity)));\n         vec4 t2 = texture2D(texture2, vec2(newUV.x, newUV.y + (1.0 - progress) * (displace1 * intensity)));\n\n         gl_FragColor = mix(t1, t2, progress);\n\n\t\t}\n\n\t`; // this.uniforms = opts.uniforms;\n\n    this.uniforms = {\n      intensity: {\n        value: 0.3,\n        type: \"f\",\n        min: 0,\n        max: 2\n      }\n    };\n    this.renderer = new THREE.WebGLRenderer();\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setClearColor(0xeeeeee, 1);\n    this.duration = opts.duration || 1;\n    this.debug = opts.debug || false;\n    this.easing = opts.easing || \"easeInOut\";\n  }\n\n  componentDidMount() {\n    this.clicker = document.getElementById(\"content\");\n    this.container = document.getElementById(\"slider\");\n    this.images = JSON.parse(this.container.getAttribute(\"data-images\"));\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight; // this.container.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.001, 1000);\n    this.camera.position.set(0, 0, 2);\n    this.time = 0;\n    this.current = 0;\n    this.textures = [];\n    this.paused = true;\n    this.initiate(() => {\n      console.log(this.textures);\n      this.setupResize();\n      this.settings();\n      this.addObjects();\n      this.resize();\n      this.clickEvent();\n      this.play();\n    });\n  }\n\n  initiate(cb) {\n    const promises = [];\n    let that = this;\n    this.images.forEach((url, i) => {\n      let promise = new Promise(resolve => {\n        that.textures[i] = new THREE.TextureLoader().load(url, resolve);\n      });\n      promises.push(promise);\n    });\n    Promise.all(promises).then(() => {\n      cb();\n    });\n  }\n\n  clickEvent() {\n    this.clicker.addEventListener(\"click\", () => {\n      this.next();\n    });\n  }\n\n  settings() {\n    let that = this;\n    if (this.debug) this.gui = new dat.GUI();\n    this.settings = {\n      progress: 0.5\n    }; // if(this.debug) this.gui.add(this.settings, \"progress\", 0, 1, 0.01);\n\n    Object.keys(this.uniforms).forEach(item => {\n      this.settings[item] = this.uniforms[item].value;\n      if (this.debug) this.gui.add(this.settings, item, this.uniforms[item].min, this.uniforms[item].max, 0.01);\n    });\n    console.log(\"it;s working\");\n  }\n\n  setupResize() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  resize() {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height; // image cover\n\n    this.imageAspect = this.textures[0].image.height / this.textures[0].image.width;\n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = this.width / this.height * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2 * (180 / Math.PI) * Math.atan(height / (2 * dist));\n    this.plane.scale.x = this.camera.aspect;\n    this.plane.scale.y = 1;\n    this.camera.updateProjectionMatrix();\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        intensity: {\n          value: 0.3,\n          type: \"f\",\n          min: 0,\n          max: 2\n        },\n        scaleX: {\n          type: \"f\",\n          value: 40\n        },\n        scaleY: {\n          type: \"f\",\n          value: 40\n        },\n        transition: {\n          type: \"f\",\n          value: 40\n        },\n        swipe: {\n          type: \"f\",\n          value: 0\n        },\n        width: {\n          type: \"f\",\n          value: 0\n        },\n        radius: {\n          type: \"f\",\n          value: 0\n        },\n        texture1: {\n          type: \"f\",\n          value: this.textures[0]\n        },\n        texture2: {\n          type: \"f\",\n          value: this.textures[1]\n        },\n        displacement: {\n          type: \"f\",\n          value: new THREE.TextureLoader().load(\"../img/disp1.jpg\")\n        },\n        resolution: {\n          type: \"v4\",\n          value: new THREE.Vector4()\n        }\n      },\n      // wireframe: true,\n      vertexShader: this.vertex,\n      fragmentShader: this.fragment\n    });\n    this.geometry = new THREE.PlaneGeometry(1, 1, 2, 2);\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.plane);\n  }\n\n  stop() {\n    this.paused = true;\n  }\n\n  play() {\n    this.paused = false;\n    this.render();\n  }\n\n  next() {\n    if (this.isRunning) return;\n    this.isRunning = true;\n    let len = this.textures.length;\n    let nextTexture = this.textures[(this.current + 1) % len];\n    this.material.uniforms.texture2.value = nextTexture;\n    let tl = new TimelineMax();\n    tl.to(this.material.uniforms.progress, this.duration, {\n      value: 1,\n      ease: Power2[this.easing],\n      onComplete: () => {\n        console.log(\"FINISH\");\n        this.current = (this.current + 1) % len;\n        this.material.uniforms.texture1.value = nextTexture;\n        this.material.uniforms.progress.value = 0;\n        this.isRunning = false;\n      }\n    });\n  } // render() {\n  //   if (this.paused) return;\n  //   this.time += 0.05;\n  //   this.material.uniforms.time.value = this.time;\n  //   // this.material.uniforms.progress.value = this.settings.progress;\n  //   Object.keys(this.uniforms).forEach(item => {\n  //     this.material.uniforms[item].value = this.settings[item];\n  //   });\n  //   // this.camera.position.z = 3;\n  //   // this.plane.rotation.y = 0.4*Math.sin(this.time)\n  //   // this.plane.rotation.x = 0.5*Math.sin(0.4*this.time)\n  //   requestAnimationFrame(this.render.bind(this));\n  //   this.renderer.render(this.scene, this.camera);\n  // }\n\n\n  render() {\n    //   let sketch = new Sketch({\n    //     debug: true,\n    //     uniforms: {\n    //       intensity: { value: 0.3, type: \"f\", min: 0, max: 2 }\n    //     },\n    //     fragment: `\n    // \tuniform float time;\n    // \tuniform float progress;\n    // \tuniform float width;\n    // \tuniform float scaleX;\n    // \tuniform float scaleY;\n    // \tuniform float transition;\n    // \tuniform float radius;\n    // \tuniform float intensity;\n    // \tuniform sampler2D texture1;\n    // \tuniform sampler2D texture2;\n    // \tuniform sampler2D displacement;\n    // \tuniform vec4 resolution;\n    // \tvarying vec2 vUv;\n    // \tvoid main()\t{\n    // \t  vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n    //        vec4 d1 = texture2D(texture1, newUV);\n    //        vec4 d2 = texture2D(texture2, newUV);\n    //        float displace1 = (d1.r + d1.g + d1.b)*0.33;\n    //        float displace2 = (d2.r + d2.g + d2.b)*0.33;\n    //        vec4 t1 = texture2D(texture1, vec2(newUV.x, newUV.y + progress * (displace2 * intensity)));\n    //        vec4 t2 = texture2D(texture2, vec2(newUV.x, newUV.y + (1.0 - progress) * (displace1 * intensity)));\n    //        gl_FragColor = mix(t1, t2, progress);\n    // \t}\n    // `\n    //   });\n    return React.createElement(\"div\", {\n      id: \"content\",\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"slider\",\n      \"data-images\": \"[ \\\"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/11/Webglimagetransitions_featured.jpg\\\", \\\"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/10/g.png\\\", \\\"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/10/uv.jpg\\\", \\\"LaPrinciere4.jpg\\\", \\\"LaPrinciere-Web1.jpg\\\", \\\"LaPrinciere-Web5.jpg\\\", \\\"LaPrinciere-Web4.jpg\\\", \\\"LaPrinciere-Web3.jpg\\\" ]\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Sketch;","map":{"version":3,"sources":["/Users/serenaantonetti/portfolio-2019/src/components/Sketch.js"],"names":["React","Component","THREE","TimelineMax","Power2","dat","Sketch","constructor","opts","scene","Scene","vertex","fragment","uniforms","intensity","value","type","min","max","renderer","WebGLRenderer","width","window","innerWidth","height","innerHeight","setPixelRatio","devicePixelRatio","setSize","setClearColor","duration","debug","easing","componentDidMount","clicker","document","getElementById","container","images","JSON","parse","getAttribute","offsetWidth","offsetHeight","camera","PerspectiveCamera","position","set","time","current","textures","paused","initiate","console","log","setupResize","settings","addObjects","resize","clickEvent","play","cb","promises","that","forEach","url","i","promise","Promise","resolve","TextureLoader","load","push","all","then","addEventListener","next","gui","GUI","progress","Object","keys","item","add","bind","aspect","imageAspect","image","a1","a2","material","resolution","x","y","z","w","dist","fov","Math","PI","atan","plane","scale","updateProjectionMatrix","ShaderMaterial","extensions","derivatives","side","DoubleSide","scaleX","scaleY","transition","swipe","radius","texture1","texture2","displacement","Vector4","vertexShader","fragmentShader","geometry","PlaneGeometry","Mesh","stop","render","isRunning","len","length","nextTexture","tl","to","ease","onComplete"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { TimelineMax, Power2 } from \"gsap/all\";\nimport * as dat from \"dat.gui\";\n\nclass Sketch extends Component {\n  constructor(opts) {\n    super(opts);\n    this.scene = new THREE.Scene();\n    this.vertex = `varying vec2 vUv;void main() {vUv = uv;gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );}`;\n    // this.fragment = opts.fragment;\n    this.fragment = `\n\t\tuniform float time;\n\t\tuniform float progress;\n\t\tuniform float width;\n\t\tuniform float scaleX;\n\t\tuniform float scaleY;\n\t\tuniform float transition;\n\t\tuniform float radius;\n\t\tuniform float intensity;\n\t\tuniform sampler2D texture1;\n\t\tuniform sampler2D texture2;\n\t\tuniform sampler2D displacement;\n\t\tuniform vec4 resolution;\n\t\tvarying vec2 vUv;\n\n\t\tvoid main()\t{\n\t\t  vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\n         vec4 d1 = texture2D(texture1, newUV);\n         vec4 d2 = texture2D(texture2, newUV);\n\n         float displace1 = (d1.r + d1.g + d1.b)*0.33;\n         float displace2 = (d2.r + d2.g + d2.b)*0.33;\n         \n         vec4 t1 = texture2D(texture1, vec2(newUV.x, newUV.y + progress * (displace2 * intensity)));\n         vec4 t2 = texture2D(texture2, vec2(newUV.x, newUV.y + (1.0 - progress) * (displace1 * intensity)));\n\n         gl_FragColor = mix(t1, t2, progress);\n\n\t\t}\n\n\t`;\n    // this.uniforms = opts.uniforms;\n    this.uniforms = { intensity: { value: 0.3, type: \"f\", min: 0, max: 2 } };\n    this.renderer = new THREE.WebGLRenderer();\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setClearColor(0xeeeeee, 1);\n    this.duration = opts.duration || 1;\n    this.debug = opts.debug || false;\n    this.easing = opts.easing || \"easeInOut\";\n  }\n\n  componentDidMount() {\n    this.clicker = document.getElementById(\"content\");\n\n    this.container = document.getElementById(\"slider\");\n    this.images = JSON.parse(this.container.getAttribute(\"data-images\"));\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    // this.container.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      70,\n      window.innerWidth / window.innerHeight,\n      0.001,\n      1000\n    );\n\n    this.camera.position.set(0, 0, 2);\n    this.time = 0;\n    this.current = 0;\n    this.textures = [];\n\n    this.paused = true;\n    this.initiate(() => {\n      console.log(this.textures);\n      this.setupResize();\n      this.settings();\n      this.addObjects();\n      this.resize();\n      this.clickEvent();\n      this.play();\n    });\n  }\n\n  initiate(cb) {\n    const promises = [];\n    let that = this;\n    this.images.forEach((url, i) => {\n      let promise = new Promise(resolve => {\n        that.textures[i] = new THREE.TextureLoader().load(url, resolve);\n      });\n      promises.push(promise);\n    });\n\n    Promise.all(promises).then(() => {\n      cb();\n    });\n  }\n\n  clickEvent() {\n    this.clicker.addEventListener(\"click\", () => {\n      this.next();\n    });\n  }\n\n  settings() {\n    let that = this;\n    if (this.debug) this.gui = new dat.GUI();\n    this.settings = { progress: 0.5 };\n    // if(this.debug) this.gui.add(this.settings, \"progress\", 0, 1, 0.01);\n\n    Object.keys(this.uniforms).forEach(item => {\n      this.settings[item] = this.uniforms[item].value;\n      if (this.debug)\n        this.gui.add(\n          this.settings,\n          item,\n          this.uniforms[item].min,\n          this.uniforms[item].max,\n          0.01\n        );\n    });\n    console.log(\"it;s working\");\n  }\n\n  setupResize() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  resize() {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n\n    // image cover\n    this.imageAspect =\n      this.textures[0].image.height / this.textures[0].image.width;\n    let a1;\n    let a2;\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2 * (180 / Math.PI) * Math.atan(height / (2 * dist));\n\n    this.plane.scale.x = this.camera.aspect;\n    this.plane.scale.y = 1;\n\n    this.camera.updateProjectionMatrix();\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n      },\n      side: THREE.DoubleSide,\n\n      uniforms: {\n        intensity: { value: 0.3, type: \"f\", min: 0, max: 2 },\n        scaleX: { type: \"f\", value: 40 },\n        scaleY: { type: \"f\", value: 40 },\n        transition: { type: \"f\", value: 40 },\n        swipe: { type: \"f\", value: 0 },\n        width: { type: \"f\", value: 0 },\n        radius: { type: \"f\", value: 0 },\n        texture1: { type: \"f\", value: this.textures[0] },\n        texture2: { type: \"f\", value: this.textures[1] },\n        displacement: {\n          type: \"f\",\n          value: new THREE.TextureLoader().load(\"../img/disp1.jpg\")\n        },\n        resolution: { type: \"v4\", value: new THREE.Vector4() }\n      },\n      // wireframe: true,\n      vertexShader: this.vertex,\n      fragmentShader: this.fragment\n    });\n\n    this.geometry = new THREE.PlaneGeometry(1, 1, 2, 2);\n\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.plane);\n  }\n\n  stop() {\n    this.paused = true;\n  }\n\n  play() {\n    this.paused = false;\n    this.render();\n  }\n\n  next() {\n    if (this.isRunning) return;\n    this.isRunning = true;\n    let len = this.textures.length;\n    let nextTexture = this.textures[(this.current + 1) % len];\n    this.material.uniforms.texture2.value = nextTexture;\n    let tl = new TimelineMax();\n    tl.to(this.material.uniforms.progress, this.duration, {\n      value: 1,\n      ease: Power2[this.easing],\n      onComplete: () => {\n        console.log(\"FINISH\");\n        this.current = (this.current + 1) % len;\n        this.material.uniforms.texture1.value = nextTexture;\n        this.material.uniforms.progress.value = 0;\n        this.isRunning = false;\n      }\n    });\n  }\n\n  // render() {\n  //   if (this.paused) return;\n  //   this.time += 0.05;\n  //   this.material.uniforms.time.value = this.time;\n  //   // this.material.uniforms.progress.value = this.settings.progress;\n\n  //   Object.keys(this.uniforms).forEach(item => {\n  //     this.material.uniforms[item].value = this.settings[item];\n  //   });\n  //   // this.camera.position.z = 3;\n  //   // this.plane.rotation.y = 0.4*Math.sin(this.time)\n  //   // this.plane.rotation.x = 0.5*Math.sin(0.4*this.time)\n\n  //   requestAnimationFrame(this.render.bind(this));\n  //   this.renderer.render(this.scene, this.camera);\n  // }\n\n  render() {\n    //   let sketch = new Sketch({\n    //     debug: true,\n    //     uniforms: {\n    //       intensity: { value: 0.3, type: \"f\", min: 0, max: 2 }\n    //     },\n    //     fragment: `\n    // \tuniform float time;\n    // \tuniform float progress;\n    // \tuniform float width;\n    // \tuniform float scaleX;\n    // \tuniform float scaleY;\n    // \tuniform float transition;\n    // \tuniform float radius;\n    // \tuniform float intensity;\n    // \tuniform sampler2D texture1;\n    // \tuniform sampler2D texture2;\n    // \tuniform sampler2D displacement;\n    // \tuniform vec4 resolution;\n    // \tvarying vec2 vUv;\n\n    // \tvoid main()\t{\n    // \t  vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\n    //        vec4 d1 = texture2D(texture1, newUV);\n    //        vec4 d2 = texture2D(texture2, newUV);\n\n    //        float displace1 = (d1.r + d1.g + d1.b)*0.33;\n    //        float displace2 = (d2.r + d2.g + d2.b)*0.33;\n\n    //        vec4 t1 = texture2D(texture1, vec2(newUV.x, newUV.y + progress * (displace2 * intensity)));\n    //        vec4 t2 = texture2D(texture2, vec2(newUV.x, newUV.y + (1.0 - progress) * (displace1 * intensity)));\n\n    //        gl_FragColor = mix(t1, t2, progress);\n\n    // \t}\n\n    // `\n    //   });\n\n    return (\n      <div id=\"content\" className=\"content\">\n        <div\n          id=\"slider\"\n          data-images='[\n        \"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/11/Webglimagetransitions_featured.jpg\",\n        \"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/10/g.png\",\n        \"https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/10/uv.jpg\",\n        \"LaPrinciere4.jpg\",\n        \"LaPrinciere-Web1.jpg\",\n        \"LaPrinciere-Web5.jpg\",\n        \"LaPrinciere-Web4.jpg\",\n        \"LaPrinciere-Web3.jpg\"\n    ]'\n        ></div>\n      </div>\n    );\n  }\n}\n\nexport default Sketch;\n"]},"metadata":{},"sourceType":"module"}