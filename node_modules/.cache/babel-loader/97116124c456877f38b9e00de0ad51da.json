{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isShaderIdentifier = isShaderIdentifier;\nexports.ensureShaderDefinition = ensureShaderDefinition;\nexports.shaderDefinitionToShaderInfo = shaderDefinitionToShaderInfo;\nexports.shaderInfoEquals = shaderInfoEquals;\nexports.default = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _GLSL = _interopRequireDefault(require(\"./GLSL\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst ShaderID = \"ShaderID\";\n/**\n * An object that contains a `frag` GLSLCode.\n * @example\n *  {\n *    frag: GLSL`...`\n *  }\n */\n\nconst shaderDefinitions = {};\nconst shaderNames = {};\nconst shaderResults = {};\n\nconst genShaderId = (i => () => (++i).toString())(0);\n\nconst staticVert = _GLSL.default`\nattribute vec2 _p;\nvarying vec2 uv;\nvoid main() {\ngl_Position = vec4(_p,0.0,1.0);\nuv = vec2(0.5, 0.5) * (_p+vec2(1.0, 1.0));\n}`;\n\nfunction isShaderIdentifier(shaderIdentifier) {\n  return typeof shaderIdentifier === \"object\" && !!shaderIdentifier && shaderIdentifier.type === ShaderID && typeof shaderIdentifier.id === \"string\";\n}\n\nfunction ensureShaderDefinition(definition, ctx = \"\") {\n  (0, _invariant.default)(definition && typeof definition.frag === \"string\", \"A `frag` GLSL code (string) is required\" + ctx);\n  return definition;\n}\n\nfunction shaderDefinitionToShaderInfo(definition) {\n  return {\n    frag: definition.frag,\n    vert: definition.vert || staticVert // FIXME this is somewhat experimental for now, vert implement needs to expect a _p attribute\n\n  };\n}\n\nfunction shaderInfoEquals(s1, s2) {\n  return s1.frag === s2.frag && s1.vert === s2.vert;\n}\n/**\n * Define shaders statically.\n * @namespace\n */\n\n\nconst Shaders = global.__glReactShaders = global.__glReactShaders || {\n  /**\n   * @memberof Shaders\n   * @param {ShadersDefinition} shadersDef - an object that statically define all shaders.\n   * @returns {ShadersSheet}, an object map that returns a ShaderIdentifier for each shader key defined in the shaders definition.\n   * @example\n   *  const shaders = Shaders.create({\n   *    helloGL: {\n   *      frag: GLSL`...`\n   *    }\n   *  });\n   *  ...\n   *  <Node shader={shaders.helloGL} />\n   */\n  create(shadersDef) {\n    const sheet = {};\n    Object.keys(shadersDef).forEach(k => {\n      const definition = ensureShaderDefinition(shadersDef[k], \" in Shaders.create({ \" + k + \": ... })\");\n      const id = genShaderId();\n      const shaderId = Object.freeze({\n        type: ShaderID,\n        id\n      });\n      shaderDefinitions[id] = definition;\n      shaderNames[id] = k;\n      sheet[k] = shaderId;\n      const result = shaderDefinitionToShaderInfo(definition);\n      shaderResults[id] = result;\n    });\n    return sheet;\n  },\n\n  getName(shaderIdentifier) {\n    return (shaderNames[shaderIdentifier.id] || \"???\") + `#${String(shaderIdentifier.id)}`;\n  },\n\n  getShortName(shaderIdentifier) {\n    return shaderNames[shaderIdentifier.id] || \"???\";\n  },\n\n  get(shaderIdentifier) {\n    (0, _invariant.default)(shaderIdentifier.id in shaderDefinitions, \"Shader %s does not exist. Make sure you don't have gl-react dup issue: `npm ls gl-react`\", shaderIdentifier.id);\n    return shaderResults[shaderIdentifier.id];\n  }\n\n};\nvar _default = Shaders;\nexports.default = _default;","map":{"version":3,"sources":["../src/Shaders.js"],"names":["ShaderID","shaderDefinitions","shaderNames","shaderResults","genShaderId","i","staticVert","GLSL","shaderIdentifier","ctx","definition","frag","vert","s1","s2","Shaders","global","create","sheet","Object","k","ensureShaderDefinition","shadersDef","id","shaderId","type","result","shaderDefinitionToShaderInfo","getName","String","getShortName","get"],"mappings":"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","sourcesContent":["//@flow\nimport invariant from \"invariant\";\nimport GLSL from \"./GLSL\";\nimport type { GLSLCode } from \"./GLSL\";\n\nconst ShaderID = \"ShaderID\";\n\n/**\n * An object that contains a `frag` GLSLCode.\n * @example\n *  {\n *    frag: GLSL`...`\n *  }\n */\ntype ShaderDefinition = {|\n  frag: GLSLCode,\n  vert?: GLSLCode\n|};\n\nexport type { ShaderDefinition };\n\n/**\n *\n */\ntype ShaderIdentifier = {\n  type: typeof ShaderID,\n  id: string\n};\n\nexport type { ShaderIdentifier };\n\ntype ShaderIdentifierMap<T> = {\n  [key: string]: T\n};\n\n/**\n * An object map from a key string to a **ShaderDefinition**.\n * @example\n *  {\n *    helloGL: {\n *      frag: GLSL`...`\n *    }\n *  }\n */\ntype ShadersDefinition = {\n  [key: string]: ShaderDefinition\n};\n\n/**\n * An object map from a key string to a **ShaderIdentifier** that you can pass to `<Node shader>`\n */\ntype ShadersSheet<S: ShadersDefinition> = {\n  [key: $Keys<S>]: ShaderIdentifier\n};\n\ntype ShaderInfo = {\n  frag: GLSLCode,\n  vert: GLSLCode\n};\n\nexport type { ShaderInfo };\n\nconst shaderDefinitions: ShaderIdentifierMap<ShaderDefinition> = {};\nconst shaderNames: ShaderIdentifierMap<string> = {};\nconst shaderResults: ShaderIdentifierMap<ShaderInfo> = {};\n\nconst genShaderId = (i => () => (++i).toString())(0);\n\nconst staticVert = GLSL`\nattribute vec2 _p;\nvarying vec2 uv;\nvoid main() {\ngl_Position = vec4(_p,0.0,1.0);\nuv = vec2(0.5, 0.5) * (_p+vec2(1.0, 1.0));\n}`;\n\nexport function isShaderIdentifier(shaderIdentifier: mixed): boolean {\n  return (\n    typeof shaderIdentifier === \"object\" &&\n    !!shaderIdentifier &&\n    shaderIdentifier.type === ShaderID &&\n    typeof shaderIdentifier.id === \"string\"\n  );\n}\n\nexport function ensureShaderDefinition(\n  definition: any,\n  ctx?: string = \"\"\n): ShaderDefinition {\n  invariant(\n    definition && typeof definition.frag === \"string\",\n    \"A `frag` GLSL code (string) is required\" + ctx\n  );\n  return definition;\n}\n\nexport function shaderDefinitionToShaderInfo(\n  definition: ShaderDefinition\n): ShaderInfo {\n  return {\n    frag: definition.frag,\n    vert: definition.vert || staticVert // FIXME this is somewhat experimental for now, vert implement needs to expect a _p attribute\n  };\n}\n\nexport function shaderInfoEquals(s1: ShaderInfo, s2: ShaderInfo): boolean {\n  return s1.frag === s2.frag && s1.vert === s2.vert;\n}\n\n/**\n * Define shaders statically.\n * @namespace\n */\nconst Shaders = (global.__glReactShaders = global.__glReactShaders || {\n  /**\n   * @memberof Shaders\n   * @param {ShadersDefinition} shadersDef - an object that statically define all shaders.\n   * @returns {ShadersSheet}, an object map that returns a ShaderIdentifier for each shader key defined in the shaders definition.\n   * @example\n   *  const shaders = Shaders.create({\n   *    helloGL: {\n   *      frag: GLSL`...`\n   *    }\n   *  });\n   *  ...\n   *  <Node shader={shaders.helloGL} />\n   */\n  create<S: ShadersDefinition>(shadersDef: S): ShadersSheet<S> {\n    const sheet = {};\n    Object.keys(shadersDef).forEach(k => {\n      const definition = ensureShaderDefinition(\n        shadersDef[k],\n        \" in Shaders.create({ \" + k + \": ... })\"\n      );\n      const id = genShaderId();\n      const shaderId = Object.freeze({ type: ShaderID, id });\n      shaderDefinitions[id] = definition;\n      shaderNames[id] = k;\n      sheet[k] = shaderId;\n      const result = shaderDefinitionToShaderInfo(definition);\n      shaderResults[id] = result;\n    });\n    return sheet;\n  },\n  getName(shaderIdentifier: ShaderIdentifier): string {\n    return (\n      (shaderNames[shaderIdentifier.id] || \"???\") +\n      `#${String(shaderIdentifier.id)}`\n    );\n  },\n  getShortName(shaderIdentifier: ShaderIdentifier): string {\n    return shaderNames[shaderIdentifier.id] || \"???\";\n  },\n  get(shaderIdentifier: ShaderIdentifier): ShaderInfo {\n    invariant(\n      shaderIdentifier.id in shaderDefinitions,\n      \"Shader %s does not exist. Make sure you don't have gl-react dup issue: `npm ls gl-react`\",\n      shaderIdentifier.id\n    );\n    return shaderResults[shaderIdentifier.id];\n  }\n});\nexport default Shaders;\n"]},"metadata":{},"sourceType":"script"}