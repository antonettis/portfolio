{"ast":null,"code":"var _jsxFileName = \"/Users/serenaantonetti/portfolio-2019/src/components/Sketch.js\";\nimport React, { Component } from 'react';\nimport * as THREE from \"three\";\nimport { Tween, Timeline } from \"react-gsap\";\n\nclass Sketch extends Component {\n  constructor(opts) {\n    this.scene = new THREE.Scene();\n    this.vertex = `varying vec2 vUv;void main() {vUv = uv;gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );}`;\n    this.fragment = opts.fragment;\n    this.uniforms = opts.uniforms;\n    this.renderer = new THREE.WebGLRenderer();\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setClearColor(0xeeeeee, 1);\n    this.duration = opts.duration || 1;\n    this.debug = opts.debug || false;\n    this.easing = opts.easing || \"easeInOut\";\n    this.clicker = document.getElementById(\"content\");\n    this.container = document.getElementById(\"slider\");\n    this.images = JSON.parse(this.container.getAttribute(\"data-images\"));\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.container.appendChild(this.renderer.domElement);\n    this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.001, 1000);\n    this.camera.position.set(0, 0, 2);\n    this.time = 0;\n    this.current = 0;\n    this.textures = [];\n    this.paused = true;\n    this.initiate(() => {\n      console.log(this.textures);\n      this.setupResize();\n      this.settings();\n      this.addObjects();\n      this.resize();\n      this.clickEvent();\n      this.play();\n    });\n  }\n\n  componentDidMount() {}\n\n  clickEvent() {\n    this.clicker.addEventListener(\"click\", () => {\n      this.next();\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    });\n  }\n\n} // class Sketch {\n//   constructor(opts) {}\n//   initiate(cb) {\n//     const promises = [];\n//     let that = this;\n//     this.images.forEach((url, i) => {\n//       let promise = new Promise(resolve => {\n//         that.textures[i] = new THREE.TextureLoader().load(url, resolve);\n//       });\n//       promises.push(promise);\n//     });\n//     Promise.all(promises).then(() => {\n//       cb();\n//     });\n//   }\n//   settings() {\n//     let that = this;\n//     if (this.debug) this.gui = new dat.GUI();\n//     this.settings = { progress: 0.5 };\n//     // if(this.debug) this.gui.add(this.settings, \"progress\", 0, 1, 0.01);\n//     Object.keys(this.uniforms).forEach(item => {\n//       this.settings[item] = this.uniforms[item].value;\n//       if (this.debug)\n//         this.gui.add(\n//           this.settings,\n//           item,\n//           this.uniforms[item].min,\n//           this.uniforms[item].max,\n//           0.01\n//         );\n//     });\n//   }\n//   setupResize() {\n//     window.addEventListener(\"resize\", this.resize.bind(this));\n//   }\n//   resize() {\n//     this.width = this.container.offsetWidth;\n//     this.height = this.container.offsetHeight;\n//     this.renderer.setSize(this.width, this.height);\n//     this.camera.aspect = this.width / this.height;\n//     // image cover\n//     this.imageAspect =\n//       this.textures[0].image.height / this.textures[0].image.width;\n//     let a1;\n//     let a2;\n//     if (this.height / this.width > this.imageAspect) {\n//       a1 = (this.width / this.height) * this.imageAspect;\n//       a2 = 1;\n//     } else {\n//       a1 = 1;\n//       a2 = this.height / this.width / this.imageAspect;\n//     }\n//     this.material.uniforms.resolution.value.x = this.width;\n//     this.material.uniforms.resolution.value.y = this.height;\n//     this.material.uniforms.resolution.value.z = a1;\n//     this.material.uniforms.resolution.value.w = a2;\n//     const dist = this.camera.position.z;\n//     const height = 1;\n//     this.camera.fov = 2 * (180 / Math.PI) * Math.atan(height / (2 * dist));\n//     this.plane.scale.x = this.camera.aspect;\n//     this.plane.scale.y = 1;\n//     this.camera.updateProjectionMatrix();\n//   }\n//   addObjects() {\n//     let that = this;\n//     this.material = new THREE.ShaderMaterial({\n//       extensions: {\n//         derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n//       },\n//       side: THREE.DoubleSide,\n//       uniforms: {\n//         time: { type: \"f\", value: 0 },\n//         progress: { type: \"f\", value: 0 },\n//         border: { type: \"f\", value: 0 },\n//         intensity: { type: \"f\", value: 0 },\n//         scaleX: { type: \"f\", value: 40 },\n//         scaleY: { type: \"f\", value: 40 },\n//         transition: { type: \"f\", value: 40 },\n//         swipe: { type: \"f\", value: 0 },\n//         width: { type: \"f\", value: 0 },\n//         radius: { type: \"f\", value: 0 },\n//         texture1: { type: \"f\", value: this.textures[0] },\n//         texture2: { type: \"f\", value: this.textures[1] },\n//         displacement: {\n//           type: \"f\",\n//           value: new THREE.TextureLoader().load(\"../img/disp1.jpg\")\n//         },\n//         resolution: { type: \"v4\", value: new THREE.Vector4() }\n//       },\n//       // wireframe: true,\n//       vertexShader: this.vertex,\n//       fragmentShader: this.fragment\n//     });\n//     this.geometry = new THREE.PlaneGeometry(1, 1, 2, 2);\n//     this.plane = new THREE.Mesh(this.geometry, this.material);\n//     this.scene.add(this.plane);\n//   }\n//   stop() {\n//     this.paused = true;\n//   }\n//   play() {\n//     this.paused = false;\n//     this.render();\n//   }\n//   next() {\n//     if (this.isRunning) return;\n//     this.isRunning = true;\n//     let len = this.textures.length;\n//     let nextTexture = this.textures[(this.current + 1) % len];\n//     this.material.uniforms.texture2.value = nextTexture;\n//     let tl = new TimelineMax();\n//     tl.to(this.material.uniforms.progress, this.duration, {\n//       value: 1,\n//       ease: Power2[this.easing],\n//       onComplete: () => {\n//         console.log(\"FINISH\");\n//         this.current = (this.current + 1) % len;\n//         this.material.uniforms.texture1.value = nextTexture;\n//         this.material.uniforms.progress.value = 0;\n//         this.isRunning = false;\n//       }\n//     });\n//   }\n//   render() {\n//     if (this.paused) return;\n//     this.time += 0.05;\n//     this.material.uniforms.time.value = this.time;\n//     // this.material.uniforms.progress.value = this.settings.progress;\n//     Object.keys(this.uniforms).forEach(item => {\n//       this.material.uniforms[item].value = this.settings[item];\n//     });\n//     √è;\n//     // this.camera.position.z = 3;\n//     // this.plane.rotation.y = 0.4*Math.sin(this.time)\n//     // this.plane.rotation.x = 0.5*Math.sin(0.4*this.time)\n//     requestAnimationFrame(this.render.bind(this));\n//     this.renderer.render(this.scene, this.camera);\n//   }\n// }","map":{"version":3,"sources":["/Users/serenaantonetti/portfolio-2019/src/components/Sketch.js"],"names":["React","Component","THREE","Tween","Timeline","Sketch","constructor","opts","scene","Scene","vertex","fragment","uniforms","renderer","WebGLRenderer","width","window","innerWidth","height","innerHeight","setPixelRatio","devicePixelRatio","setSize","setClearColor","duration","debug","easing","clicker","document","getElementById","container","images","JSON","parse","getAttribute","offsetWidth","offsetHeight","appendChild","domElement","camera","PerspectiveCamera","position","set","time","current","textures","paused","initiate","console","log","setupResize","settings","addObjects","resize","clickEvent","play","componentDidMount","addEventListener","next","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,YAAhC;;AAEA,MAAMC,MAAN,SAAqBJ,SAArB,CAA+B;AAC7BK,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,SAAKC,KAAL,GAAa,IAAIN,KAAK,CAACO,KAAV,EAAb;AACA,SAAKC,MAAL,GAAe,mHAAf;AACA,SAAKC,QAAL,GAAgBJ,IAAI,CAACI,QAArB;AACA,SAAKC,QAAL,GAAgBL,IAAI,CAACK,QAArB;AACA,SAAKC,QAAL,GAAgB,IAAIX,KAAK,CAACY,aAAV,EAAhB;AACA,SAAKC,KAAL,GAAaC,MAAM,CAACC,UAApB;AACA,SAAKC,MAAL,GAAcF,MAAM,CAACG,WAArB;AACA,SAAKN,QAAL,CAAcO,aAAd,CAA4BJ,MAAM,CAACK,gBAAnC;AACA,SAAKR,QAAL,CAAcS,OAAd,CAAsB,KAAKP,KAA3B,EAAkC,KAAKG,MAAvC;AACA,SAAKL,QAAL,CAAcU,aAAd,CAA4B,QAA5B,EAAsC,CAAtC;AACA,SAAKC,QAAL,GAAgBjB,IAAI,CAACiB,QAAL,IAAiB,CAAjC;AACA,SAAKC,KAAL,GAAalB,IAAI,CAACkB,KAAL,IAAc,KAA3B;AACA,SAAKC,MAAL,GAAcnB,IAAI,CAACmB,MAAL,IAAe,WAA7B;AAEA,SAAKC,OAAL,GAAeC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAf;AAEA,SAAKC,SAAL,GAAiBF,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAjB;AACA,SAAKE,MAAL,GAAcC,IAAI,CAACC,KAAL,CAAW,KAAKH,SAAL,CAAeI,YAAf,CAA4B,aAA5B,CAAX,CAAd;AACA,SAAKnB,KAAL,GAAa,KAAKe,SAAL,CAAeK,WAA5B;AACA,SAAKjB,MAAL,GAAc,KAAKY,SAAL,CAAeM,YAA7B;AACA,SAAKN,SAAL,CAAeO,WAAf,CAA2B,KAAKxB,QAAL,CAAcyB,UAAzC;AAEA,SAAKC,MAAL,GAAc,IAAIrC,KAAK,CAACsC,iBAAV,CACZ,EADY,EAEZxB,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACG,WAFf,EAGZ,KAHY,EAIZ,IAJY,CAAd;AAOA,SAAKoB,MAAL,CAAYE,QAAZ,CAAqBC,GAArB,CAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B;AACA,SAAKC,IAAL,GAAY,CAAZ;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,QAAL,GAAgB,EAAhB;AAEA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,QAAL,CAAc,MAAM;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,QAAjB;AACA,WAAKK,WAAL;AACA,WAAKC,QAAL;AACA,WAAKC,UAAL;AACA,WAAKC,MAAL;AACA,WAAKC,UAAL;AACA,WAAKC,IAAL;AACD,KARD;AASD;;AAEDC,EAAAA,iBAAiB,GAAG,CACnB;;AAEDF,EAAAA,UAAU,GAAG;AACX,SAAK3B,OAAL,CAAa8B,gBAAb,CAA8B,OAA9B,EAAuC,MAAM;AAC3C,WAAKC,IAAL;AACD,KAFD;AAGD;;AACDC,EAAAA,MAAM,GAAG;AACP,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AA1D4B,C,CA6D/B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react'\nimport * as THREE from \"three\";\nimport { Tween, Timeline } from \"react-gsap\";\n\nclass Sketch extends Component {\n  constructor(opts) {\n    this.scene = new THREE.Scene();\n    this.vertex = `varying vec2 vUv;void main() {vUv = uv;gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );}`;\n    this.fragment = opts.fragment;\n    this.uniforms = opts.uniforms;\n    this.renderer = new THREE.WebGLRenderer();\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setClearColor(0xeeeeee, 1);\n    this.duration = opts.duration || 1;\n    this.debug = opts.debug || false;\n    this.easing = opts.easing || \"easeInOut\";\n\n    this.clicker = document.getElementById(\"content\");\n\n    this.container = document.getElementById(\"slider\");\n    this.images = JSON.parse(this.container.getAttribute(\"data-images\"));\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.container.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      70,\n      window.innerWidth / window.innerHeight,\n      0.001,\n      1000\n    );\n\n    this.camera.position.set(0, 0, 2);\n    this.time = 0;\n    this.current = 0;\n    this.textures = [];\n\n    this.paused = true;\n    this.initiate(() => {\n      console.log(this.textures);\n      this.setupResize();\n      this.settings();\n      this.addObjects();\n      this.resize();\n      this.clickEvent();\n      this.play();\n    });\n  }\n\n  componentDidMount() {\n  }\n\n  clickEvent() {\n    this.clicker.addEventListener(\"click\", () => {\n      this.next();\n    });\n  }\n  render() {\n    return <div />;\n  }\n}\n\n// class Sketch {\n//   constructor(opts) {}\n\n//   initiate(cb) {\n//     const promises = [];\n//     let that = this;\n//     this.images.forEach((url, i) => {\n//       let promise = new Promise(resolve => {\n//         that.textures[i] = new THREE.TextureLoader().load(url, resolve);\n//       });\n//       promises.push(promise);\n//     });\n\n//     Promise.all(promises).then(() => {\n//       cb();\n//     });\n//   }\n\n\n//   settings() {\n//     let that = this;\n//     if (this.debug) this.gui = new dat.GUI();\n//     this.settings = { progress: 0.5 };\n//     // if(this.debug) this.gui.add(this.settings, \"progress\", 0, 1, 0.01);\n\n//     Object.keys(this.uniforms).forEach(item => {\n//       this.settings[item] = this.uniforms[item].value;\n//       if (this.debug)\n//         this.gui.add(\n//           this.settings,\n//           item,\n//           this.uniforms[item].min,\n//           this.uniforms[item].max,\n//           0.01\n//         );\n//     });\n//   }\n\n//   setupResize() {\n//     window.addEventListener(\"resize\", this.resize.bind(this));\n//   }\n\n//   resize() {\n//     this.width = this.container.offsetWidth;\n//     this.height = this.container.offsetHeight;\n//     this.renderer.setSize(this.width, this.height);\n//     this.camera.aspect = this.width / this.height;\n\n//     // image cover\n//     this.imageAspect =\n//       this.textures[0].image.height / this.textures[0].image.width;\n//     let a1;\n//     let a2;\n//     if (this.height / this.width > this.imageAspect) {\n//       a1 = (this.width / this.height) * this.imageAspect;\n//       a2 = 1;\n//     } else {\n//       a1 = 1;\n//       a2 = this.height / this.width / this.imageAspect;\n//     }\n\n//     this.material.uniforms.resolution.value.x = this.width;\n//     this.material.uniforms.resolution.value.y = this.height;\n//     this.material.uniforms.resolution.value.z = a1;\n//     this.material.uniforms.resolution.value.w = a2;\n\n//     const dist = this.camera.position.z;\n//     const height = 1;\n//     this.camera.fov = 2 * (180 / Math.PI) * Math.atan(height / (2 * dist));\n\n//     this.plane.scale.x = this.camera.aspect;\n//     this.plane.scale.y = 1;\n\n//     this.camera.updateProjectionMatrix();\n//   }\n\n//   addObjects() {\n//     let that = this;\n//     this.material = new THREE.ShaderMaterial({\n//       extensions: {\n//         derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n//       },\n//       side: THREE.DoubleSide,\n//       uniforms: {\n//         time: { type: \"f\", value: 0 },\n//         progress: { type: \"f\", value: 0 },\n//         border: { type: \"f\", value: 0 },\n//         intensity: { type: \"f\", value: 0 },\n//         scaleX: { type: \"f\", value: 40 },\n//         scaleY: { type: \"f\", value: 40 },\n//         transition: { type: \"f\", value: 40 },\n//         swipe: { type: \"f\", value: 0 },\n//         width: { type: \"f\", value: 0 },\n//         radius: { type: \"f\", value: 0 },\n//         texture1: { type: \"f\", value: this.textures[0] },\n//         texture2: { type: \"f\", value: this.textures[1] },\n//         displacement: {\n//           type: \"f\",\n//           value: new THREE.TextureLoader().load(\"../img/disp1.jpg\")\n//         },\n//         resolution: { type: \"v4\", value: new THREE.Vector4() }\n//       },\n//       // wireframe: true,\n//       vertexShader: this.vertex,\n//       fragmentShader: this.fragment\n//     });\n\n//     this.geometry = new THREE.PlaneGeometry(1, 1, 2, 2);\n\n//     this.plane = new THREE.Mesh(this.geometry, this.material);\n//     this.scene.add(this.plane);\n//   }\n\n//   stop() {\n//     this.paused = true;\n//   }\n\n//   play() {\n//     this.paused = false;\n//     this.render();\n//   }\n\n//   next() {\n//     if (this.isRunning) return;\n//     this.isRunning = true;\n//     let len = this.textures.length;\n//     let nextTexture = this.textures[(this.current + 1) % len];\n//     this.material.uniforms.texture2.value = nextTexture;\n//     let tl = new TimelineMax();\n//     tl.to(this.material.uniforms.progress, this.duration, {\n//       value: 1,\n//       ease: Power2[this.easing],\n//       onComplete: () => {\n//         console.log(\"FINISH\");\n//         this.current = (this.current + 1) % len;\n//         this.material.uniforms.texture1.value = nextTexture;\n//         this.material.uniforms.progress.value = 0;\n//         this.isRunning = false;\n//       }\n//     });\n//   }\n//   render() {\n//     if (this.paused) return;\n//     this.time += 0.05;\n//     this.material.uniforms.time.value = this.time;\n//     // this.material.uniforms.progress.value = this.settings.progress;\n\n//     Object.keys(this.uniforms).forEach(item => {\n//       this.material.uniforms[item].value = this.settings[item];\n//     });\n//     √è;\n//     // this.camera.position.z = 3;\n//     // this.plane.rotation.y = 0.4*Math.sin(this.time)\n//     // this.plane.rotation.x = 0.5*Math.sin(0.4*this.time)\n\n//     requestAnimationFrame(this.render.bind(this));\n//     this.renderer.render(this.scene, this.camera);\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}