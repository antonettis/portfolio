{"ast":null,"code":"import { ResizeObserverBoxOptions } from '../ResizeObserverBoxOptions';\nimport { DOMRectReadOnly } from '../DOMRectReadOnly';\nimport { isSVG, isHidden } from '../utils/element';\nimport { global } from '../utils/global';\nvar cache = new Map();\nvar scrollRegexp = /auto|scroll/;\nvar verticalRegexp = /^tb|vertical/;\nvar IE = /msie|trident/i.test(global.navigator && global.navigator.userAgent);\n\nvar parseDimension = function (pixel) {\n  return parseFloat(pixel || '0');\n};\n\nvar size = function (inlineSize, blockSize, switchSizes) {\n  if (inlineSize === void 0) {\n    inlineSize = 0;\n  }\n\n  if (blockSize === void 0) {\n    blockSize = 0;\n  }\n\n  if (switchSizes === void 0) {\n    switchSizes = false;\n  }\n\n  return Object.freeze({\n    inlineSize: (switchSizes ? blockSize : inlineSize) || 0,\n    blockSize: (switchSizes ? inlineSize : blockSize) || 0\n  });\n};\n\nvar zeroBoxes = Object.freeze({\n  borderBoxSize: size(),\n  contentBoxSize: size(),\n  contentRect: new DOMRectReadOnly(0, 0, 0, 0)\n});\n\nvar calculateBoxSizes = function (target) {\n  if (cache.has(target)) {\n    return cache.get(target);\n  }\n\n  if (isHidden(target)) {\n    cache.set(target, zeroBoxes);\n    return zeroBoxes;\n  }\n\n  var cs = getComputedStyle(target);\n  var svg = isSVG(target) && target.getBBox();\n  var removePadding = !IE && cs.boxSizing === 'border-box';\n  var switchSizes = verticalRegexp.test(cs.writingMode || '');\n  var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');\n  var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');\n  var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);\n  var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);\n  var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);\n  var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);\n  var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);\n  var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);\n  var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);\n  var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);\n  var horizontalPadding = paddingLeft + paddingRight;\n  var verticalPadding = paddingTop + paddingBottom;\n  var horizontalBorderArea = borderLeft + borderRight;\n  var verticalBorderArea = borderTop + borderBottom;\n  var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;\n  var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;\n  var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;\n  var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;\n  var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;\n  var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;\n  var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;\n  var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;\n  var boxes = Object.freeze({\n    borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),\n    contentBoxSize: size(contentWidth, contentHeight, switchSizes),\n    contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)\n  });\n  cache.set(target, boxes);\n  return boxes;\n};\n\nvar calculateBoxSize = function (target, observedBox) {\n  var _a = calculateBoxSizes(target),\n      borderBoxSize = _a.borderBoxSize,\n      contentBoxSize = _a.contentBoxSize;\n\n  return observedBox === ResizeObserverBoxOptions.BORDER_BOX ? borderBoxSize : contentBoxSize;\n};\n\nexport { calculateBoxSize, calculateBoxSizes, cache };","map":{"version":3,"sources":["/Users/serenaantonetti/portfolio-2019/node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js"],"names":["ResizeObserverBoxOptions","DOMRectReadOnly","isSVG","isHidden","global","cache","Map","scrollRegexp","verticalRegexp","IE","test","navigator","userAgent","parseDimension","pixel","parseFloat","size","inlineSize","blockSize","switchSizes","Object","freeze","zeroBoxes","borderBoxSize","contentBoxSize","contentRect","calculateBoxSizes","target","has","get","set","cs","getComputedStyle","svg","getBBox","removePadding","boxSizing","writingMode","canScrollVertically","overflowY","canScrollHorizontally","overflowX","paddingTop","paddingRight","paddingBottom","paddingLeft","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","borderLeft","borderLeftWidth","horizontalPadding","verticalPadding","horizontalBorderArea","verticalBorderArea","horizontalScrollbarThickness","offsetHeight","clientHeight","verticalScrollbarThickness","offsetWidth","clientWidth","widthReduction","heightReduction","contentWidth","width","contentHeight","height","borderBoxWidth","borderBoxHeight","boxes","calculateBoxSize","observedBox","_a","BORDER_BOX"],"mappings":"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","sourcesContent":["import { ResizeObserverBoxOptions } from '../ResizeObserverBoxOptions';\nimport { DOMRectReadOnly } from '../DOMRectReadOnly';\nimport { isSVG, isHidden } from '../utils/element';\nimport { global } from '../utils/global';\nvar cache = new Map();\nvar scrollRegexp = /auto|scroll/;\nvar verticalRegexp = /^tb|vertical/;\nvar IE = (/msie|trident/i).test(global.navigator && global.navigator.userAgent);\nvar parseDimension = function (pixel) { return parseFloat(pixel || '0'); };\nvar size = function (inlineSize, blockSize, switchSizes) {\n    if (inlineSize === void 0) { inlineSize = 0; }\n    if (blockSize === void 0) { blockSize = 0; }\n    if (switchSizes === void 0) { switchSizes = false; }\n    return Object.freeze({\n        inlineSize: (switchSizes ? blockSize : inlineSize) || 0,\n        blockSize: (switchSizes ? inlineSize : blockSize) || 0\n    });\n};\nvar zeroBoxes = Object.freeze({\n    borderBoxSize: size(),\n    contentBoxSize: size(),\n    contentRect: new DOMRectReadOnly(0, 0, 0, 0)\n});\nvar calculateBoxSizes = function (target) {\n    if (cache.has(target)) {\n        return cache.get(target);\n    }\n    if (isHidden(target)) {\n        cache.set(target, zeroBoxes);\n        return zeroBoxes;\n    }\n    var cs = getComputedStyle(target);\n    var svg = isSVG(target) && target.getBBox();\n    var removePadding = !IE && cs.boxSizing === 'border-box';\n    var switchSizes = verticalRegexp.test(cs.writingMode || '');\n    var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');\n    var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');\n    var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);\n    var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);\n    var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);\n    var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);\n    var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);\n    var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);\n    var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);\n    var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);\n    var horizontalPadding = paddingLeft + paddingRight;\n    var verticalPadding = paddingTop + paddingBottom;\n    var horizontalBorderArea = borderLeft + borderRight;\n    var verticalBorderArea = borderTop + borderBottom;\n    var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;\n    var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;\n    var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;\n    var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;\n    var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;\n    var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;\n    var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;\n    var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;\n    var boxes = Object.freeze({\n        borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),\n        contentBoxSize: size(contentWidth, contentHeight, switchSizes),\n        contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)\n    });\n    cache.set(target, boxes);\n    return boxes;\n};\nvar calculateBoxSize = function (target, observedBox) {\n    var _a = calculateBoxSizes(target), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize;\n    return observedBox === ResizeObserverBoxOptions.BORDER_BOX ? borderBoxSize : contentBoxSize;\n};\nexport { calculateBoxSize, calculateBoxSizes, cache };\n"]},"metadata":{},"sourceType":"module"}