{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * A set of Uniform symbols you can pass to a uniform. (recognized and interpreted by Node)\n */\n\nconst Uniform = {\n  /**\n   * Inject the texture of the previous framebuffer state\n   */\n  Backbuffer: \"_Backbuffer_\",\n\n  /**\n   * Inject the texture of the previous framebuffer state of another Node pointed by its reference.\n   * @param  {Node | Bus} a Node or Bus instance of what you want the backbuffer from. the Node needs to have backbuffering enabled. (in case of Bus, it means its root Node)\n   */\n  backbufferFrom: node => ({\n    type: \"BackbufferFrom\",\n    node\n  }),\n\n  /**\n   * the framebuffer size itself\n   */\n  Resolution: \"_Resolution_\",\n\n  /**\n   * Inject the size of a given Texture input\n   * @param {any} obj the texture input object\n   */\n  textureSize: obj => ({\n    type: \"TextureSize\",\n    obj\n  }),\n\n  /**\n   * Inject the width/height ratio of a given Texture input\n   * @param {any} obj the texture input object\n   */\n  textureSizeRatio: obj => ({\n    type: \"TextureSize\",\n    obj,\n    ratio: true\n  })\n};\nvar _default = Uniform;\nexports.default = _default;","map":{"version":3,"sources":["../src/Uniform.js"],"names":["Uniform","Backbuffer","backbufferFrom","node","type","Resolution","textureSize","obj","textureSizeRatio","ratio"],"mappings":";;;;;;AAIA;;;;AAGA,MAAMA,OAAO,GAAG;AACd;;;AAGAC,EAAAA,UAAU,EAJI,cAAA;;AAMd;;;;AAIAC,EAAAA,cAAc,EAAGC,IAAD,KAAuB;AAAEC,IAAAA,IAAI,EAAN,gBAAA;AAA0BD,IAAAA;AAA1B,GAAvB,CAVF;;AAYd;;;AAGAE,EAAAA,UAAU,EAfI,cAAA;;AAgBd;;;;AAIAC,EAAAA,WAAW,EAAGC,GAAD,KAAa;AAAEH,IAAAA,IAAI,EAAN,aAAA;AAAuBG,IAAAA;AAAvB,GAAb,CApBC;;AAqBd;;;;AAIAC,EAAAA,gBAAgB,EAAGD,GAAD,KAAa;AAAEH,IAAAA,IAAI,EAAN,aAAA;AAAA,IAAA,GAAA;AAA4BK,IAAAA,KAAK,EAAE;AAAnC,GAAb;AAzBJ,CAAhB;eA4BeT,O","sourcesContent":["//@flow\nimport type Node from \"./Node\";\nimport type Bus from \"./Bus\";\n\n/**\n * A set of Uniform symbols you can pass to a uniform. (recognized and interpreted by Node)\n */\nconst Uniform = {\n  /**\n   * Inject the texture of the previous framebuffer state\n   */\n  Backbuffer: \"_Backbuffer_\",\n\n  /**\n   * Inject the texture of the previous framebuffer state of another Node pointed by its reference.\n   * @param  {Node | Bus} a Node or Bus instance of what you want the backbuffer from. the Node needs to have backbuffering enabled. (in case of Bus, it means its root Node)\n   */\n  backbufferFrom: (node: Node | Bus) => ({ type: \"BackbufferFrom\", node }),\n\n  /**\n   * the framebuffer size itself\n   */\n  Resolution: \"_Resolution_\",\n  /**\n   * Inject the size of a given Texture input\n   * @param {any} obj the texture input object\n   */\n  textureSize: (obj: *) => ({ type: \"TextureSize\", obj }),\n  /**\n   * Inject the width/height ratio of a given Texture input\n   * @param {any} obj the texture input object\n   */\n  textureSizeRatio: (obj: *) => ({ type: \"TextureSize\", obj, ratio: true })\n};\n\nexport default Uniform;\n"]},"metadata":{},"sourceType":"script"}