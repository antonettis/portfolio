{"ast":null,"code":"import _slicedToArray from \"/Users/serenaantonetti/portfolio-2019/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/serenaantonetti/portfolio-2019/src/components/ProgressBar.jsx\";\n\nconst ReadingProgress = ({\n  target\n}) => {\n  const _React$useState = React.useState(0),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        readingProgress = _React$useState2[0],\n        setReadingProgress = _React$useState2[1];\n\n  const scrollListener = () => {\n    if (!target.current) {\n      return;\n    }\n\n    const element = target.current;\n    const totalHeight = element.clientHeight - element.offsetTop - window.innerHeight;\n    const windowScrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n\n    if (windowScrollTop === 0) {\n      return setReadingProgress(0);\n    }\n\n    if (windowScrollTop > totalHeight) {\n      return setReadingProgress(100);\n    }\n\n    setReadingProgress(windowScrollTop / totalHeight * 100);\n  };\n\n  React.useEffect(() => {\n    window.addEventListener(\"scroll\", scrollListener);\n    return () => window.removeEventListener(\"scroll\", scrollListener);\n  });\n  return React.createElement(\"div\", {\n    className: `reading-progress-bar`,\n    style: {\n      width: `${readingProgress}%`\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  });\n};\n\nexport default ReadingProgress;","map":{"version":3,"sources":["/Users/serenaantonetti/portfolio-2019/src/components/ProgressBar.jsx"],"names":["ReadingProgress","target","React","useState","readingProgress","setReadingProgress","scrollListener","current","element","totalHeight","clientHeight","offsetTop","window","innerHeight","windowScrollTop","pageYOffset","document","documentElement","scrollTop","body","useEffect","addEventListener","removeEventListener","width"],"mappings":";;;AAAA,MAAMA,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAAA,0BACQC,KAAK,CAACC,QAAN,CAAe,CAAf,CADR;AAAA;AAAA,QAC/BC,eAD+B;AAAA,QACdC,kBADc;;AAEtC,QAAMC,cAAc,GAAG,MAAM;AAC3B,QAAI,CAACL,MAAM,CAACM,OAAZ,EAAqB;AACnB;AACD;;AAED,UAAMC,OAAO,GAAGP,MAAM,CAACM,OAAvB;AACA,UAAME,WAAW,GACfD,OAAO,CAACE,YAAR,GAAuBF,OAAO,CAACG,SAA/B,GAA2CC,MAAM,CAACC,WADpD;AAEA,UAAMC,eAAe,GACnBF,MAAM,CAACG,WAAP,IACAC,QAAQ,CAACC,eAAT,CAAyBC,SADzB,IAEAF,QAAQ,CAACG,IAAT,CAAcD,SAFd,IAGA,CAJF;;AAMA,QAAIJ,eAAe,KAAK,CAAxB,EAA2B;AACzB,aAAOT,kBAAkB,CAAC,CAAD,CAAzB;AACD;;AAED,QAAIS,eAAe,GAAGL,WAAtB,EAAmC;AACjC,aAAOJ,kBAAkB,CAAC,GAAD,CAAzB;AACD;;AAEDA,IAAAA,kBAAkB,CAAES,eAAe,GAAGL,WAAnB,GAAkC,GAAnC,CAAlB;AACD,GAvBD;;AAyBAP,EAAAA,KAAK,CAACkB,SAAN,CAAgB,MAAM;AACpBR,IAAAA,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCf,cAAlC;AACA,WAAO,MAAMM,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqChB,cAArC,CAAb;AACD,GAHD;AAKA,SACE;AACE,IAAA,SAAS,EAAG,sBADd;AAEE,IAAA,KAAK,EAAE;AAAEiB,MAAAA,KAAK,EAAG,GAAEnB,eAAgB;AAA5B,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAMD,CAtCD;;AAwCA,eAAeJ,eAAf","sourcesContent":["const ReadingProgress = ({ target }) => {\n  const [readingProgress, setReadingProgress] = React.useState(0);\n  const scrollListener = () => {\n    if (!target.current) {\n      return;\n    }\n\n    const element = target.current;\n    const totalHeight =\n      element.clientHeight - element.offsetTop - window.innerHeight;\n    const windowScrollTop =\n      window.pageYOffset ||\n      document.documentElement.scrollTop ||\n      document.body.scrollTop ||\n      0;\n\n    if (windowScrollTop === 0) {\n      return setReadingProgress(0);\n    }\n\n    if (windowScrollTop > totalHeight) {\n      return setReadingProgress(100);\n    }\n\n    setReadingProgress((windowScrollTop / totalHeight) * 100);\n  };\n\n  React.useEffect(() => {\n    window.addEventListener(\"scroll\", scrollListener);\n    return () => window.removeEventListener(\"scroll\", scrollListener);\n  });\n\n  return (\n    <div\n      className={`reading-progress-bar`}\n      style={{ width: `${readingProgress}%` }}\n    />\n  );\n};\n\nexport default ReadingProgress;\n"]},"metadata":{},"sourceType":"module"}